// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/Proto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protos/Proto.proto</summary>
public static partial class ProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for protos/Proto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJwcm90b3MvUHJvdG8ucHJvdG8iIAoIUG9zaXRpb24SCQoBeBgBIAEoAhIJ",
          "CgF6GAIgASgCIhUKCFJvdGF0aW9uEgkKAXkYASABKAIiWAoMVW5pdFBvc2l0",
          "aW9uEg4KBnVuaXRJZBgBIAEoBRIbCghwb3NpdGlvbhgCIAEoCzIJLlBvc2l0",
          "aW9uEhsKCHJvdGF0aW9uGAMgASgLMgkuUm90YXRpb24iKgoIVW5pdEluZm8S",
          "DgoGdW5pdElkGAEgASgFEg4KBnVuaXRIcBgCIAEoBSI/ChRTMkNFcnJvck5v",
          "dGlmaWNhdGlvbhIRCgllcnJvckNvZGUYASABKAUSFAoMZXJyb3JNZXNzYWdl",
          "GAIgASgJIh8KDkMyU0F1dGhSZXF1ZXN0Eg0KBXRva2VuGAEgASgJIhEKD1My",
          "Q0F1dGhSZXNwb25zZSIiCg9DMlNNYXRjaFJlcXVlc3QSDwoHc3BlY2llcxgB",
          "IAEoCSI4ChRTMkNNYXRjaE5vdGlmaWNhdGlvbhISCgpvcHBvbmVudElkGAEg",
          "ASgJEgwKBHBvcnQYAiABKAUiFwoVQzJTTWF0Y2hDYW5jZWxSZXF1ZXN0IhUK",
          "E0MyU0dhbWVTdGFydFJlcXVlc3QiKwoYUzJDR2FtZVN0YXJ0Tm90aWZpY2F0",
          "aW9uEg8KB3NwZWNpZXMYASABKAkiLQoaQzJTUHVyY2hhc2VCdWlsZGluZ1Jl",
          "cXVlc3QSDwoHYXNzZXRJZBgBIAEoBSIuChtTMkNQdXJjaGFzZUJ1aWxkaW5n",
          "UmVzcG9uc2USDwoHYXNzZXRJZBgBIAEoBSIyCh9TMkNBZGRFbmVteUJ1aWxk",
          "aW5nTm90aWZpY2F0aW9uEg8KB2Fzc2V0SWQYASABKAUiNQoTQzJTU3Bhd25V",
          "bml0UmVxdWVzdBIPCgdhc3NldElkGAEgASgFEg0KBXRvVG9wGAIgASgIIkYK",
          "FFMyQ1NwYXduVW5pdFJlc3BvbnNlEg8KB2Fzc2V0SWQYASABKAUSDgoGdW5p",
          "dElkGAIgASgFEg0KBXRvVG9wGAMgASgIIk8KHVMyQ1NwYXduRW5lbXlVbml0",
          "Tm90aWZpY2F0aW9uEg8KB2Fzc2V0SWQYASABKAUSDgoGdW5pdElkGAIgASgF",
          "Eg0KBXRvVG9wGAMgASgIIkYKFEMyU0F0dGFja1VuaXRSZXF1ZXN0EhcKD2F0",
          "dGFja2luZ1VuaXRJZBgBIAEoBRIVCg10YXJnZXRVbml0SWRzGAIgAygFIlwK",
          "GVMyQ0F0dGFja1VuaXROb3RpZmljYXRpb24SFwoPYXR0YWNraW5nVW5pdElk",
          "GAEgASgFEhUKDXRhcmdldFVuaXRJZHMYAiADKAUSDwoHc3VjY2VzcxgDIAEo",
          "CCJFChRDMlNEYW1hZ2VVbml0UmVxdWVzdBIXCg9hdHRhY2tpbmdVbml0SWQY",
          "ASABKAUSFAoMdGFyZ2V0VW5pdElkGAIgASgFIjgKGVMyQ0RhbWFnZVVuaXRO",
          "b3RpZmljYXRpb24SGwoIdW5pdEluZm8YASABKAsyCS5Vbml0SW5mbyIrChhT",
          "MkNVbml0RGVhdGhOb3RpZmljYXRpb24SDwoHdW5pdElkcxgBIAMoBSIwCh5D",
          "MlNFbnRlckNoZWNrcG9pbnROb3RpZmljYXRpb24SDgoGdW5pdElkGAEgASgF",
          "Ii8KHUMyU0V4aXRDaGVja3BvaW50Tm90aWZpY2F0aW9uEg4KBnVuaXRJZBgB",
          "IAEoBSJBChxTMkNUcnlPY2N1cGF0aW9uTm90aWZpY2F0aW9uEg0KBWlzVG9w",
          "GAEgASgIEhIKCmlzT3Bwb25lbnQYAiABKAgiLwoeUzJDUGF1c2VPY2N1cGF0",
          "aW9uTm90aWZpY2F0aW9uEg0KBWlzVG9wGAEgASgIIjQKI1MyQ09jY3VwYXRp",
          "b25UaW1lclJlc2V0Tm90aWZpY2F0aW9uEg0KBWlzVG9wGAEgASgIIkUKIFMy",
          "Q09jY3VwYXRpb25TdWNjZXNzTm90aWZpY2F0aW9uEg0KBWlzVG9wGAEgASgI",
          "EhIKCmlzT3Bwb25lbnQYAiABKAgiJgoUQzJTQXR0YWNrQmFzZVJlcXVlc3QS",
          "DgoGdW5pdElkGAEgASgFIjgKFVMyQ0F0dGFja0Jhc2VSZXNwb25zZRIOCgZ1",
          "bml0SWQYASABKAUSDwoHc3VjY2VzcxgCIAEoCCJBCh5TMkNFbmVteUF0dGFj",
          "a0Jhc2VOb3RpZmljYXRpb24SDgoGdW5pdElkGAEgASgFEg8KB3N1Y2Nlc3MY",
          "AiABKAgiJgoUQzJTRGFtYWdlQmFzZVJlcXVlc3QSDgoGdW5pdElkGAEgASgF",
          "IicKFVMyQ0RhbWFnZUJhc2VSZXNwb25zZRIOCgZiYXNlSHAYASABKAUiMAoe",
          "UzJDRW5lbXlEYW1hZ2VCYXNlTm90aWZpY2F0aW9uEg4KBmJhc2VIcBgBIAEo",
          "BSIoChdTMkNHYW1lT3Zlck5vdGlmaWNhdGlvbhINCgVpc1dpbhgBIAEoCCIY",
          "ChZDMlNHYW1lRW5kTm90aWZpY2F0aW9uIj8KF0MyU0xvY2F0aW9uTm90aWZp",
          "Y2F0aW9uEiQKDXVuaXRQb3NpdGlvbnMYASADKAsyDS5Vbml0UG9zaXRpb24i",
          "QwobUzJDTG9jYXRpb25TeW5jTm90aWZpY2F0aW9uEiQKDXVuaXRQb3NpdGlv",
          "bnMYASADKAsyDS5Vbml0UG9zaXRpb24iLQoaUzJDTWluZXJhbFN5bmNOb3Rp",
          "ZmljYXRpb24SDwoHbWluZXJhbBgBIAEoBSJKChJDMlNIZWFsVW5pdFJlcXVl",
          "c3QSDgoGdW5pdElkGAEgASgFEhAKCHRhcmdldElkGAIgASgFEhIKCmhlYWxB",
          "bW91bnQYAyABKAUiSgoXUzJDSGVhbFVuaXROb3RpZmljYXRpb24SDgoGdW5p",
          "dElkGAEgASgFEg4KBnVuaXRIcBgCIAEoBRIPCgdzdWNjZXNzGAMgASgIImEK",
          "EkMyU0J1ZmZVbml0UmVxdWVzdBIOCgZ1bml0SWQYASABKAUSEQoJdGFyZ2V0",
          "SWRzGAIgAygFEhIKCmJ1ZmZBbW91bnQYAyABKAUSFAoMYnVmZkR1cmF0aW9u",
          "GAQgASgFImUKF1MyQ0J1ZmZVbml0Tm90aWZpY2F0aW9uEg8KB3VuaXRJZHMY",
          "ASADKAUSEgoKYnVmZkFtb3VudBgCIAEoBRIUCgxidWZmRHVyYXRpb24YAyAB",
          "KAUSDwoHc3VjY2VzcxgEIAEoCCJDChxDMlNVbml0QW5pbWF0aW9uTm90aWZp",
          "Y2F0aW9uEg4KBnVuaXRJZBgBIAEoBRITCgthbmltYXRpb25JZBgCIAEoBSJI",
          "CiFTMkNFbmVteVVuaXRBbmltYXRpb25Ob3RpZmljYXRpb24SDgoGdW5pdElk",
          "GAEgASgFEhMKC2FuaW1hdGlvbklkGAIgASgFIigKEkMyU0RyYXdDYXJkUmVx",
          "dWVzdBISCgpidXR0b25UeXBlGAEgASgFIiYKE1MyQ0RyYXdDYXJkUmVzcG9u",
          "c2USDwoHYXNzZXRJZBgBIAEoBSJJChhTMkNFbGl0ZUNhcmROb3RpZmljYXRp",
          "b24SFwoPY29uc3VtZWRBc3NldElkGAEgASgFEhQKDGVsaXRlQXNzZXRJZBgC",
          "IAEoBSJDChVDMlNBdHRhY2tTcGVsbFJlcXVlc3QSGQoGY2VudGVyGAEgASgL",
          "MgkuUG9zaXRpb24SDwoHdW5pdElkcxgCIAMoBSI2ChZTMkNBdHRhY2tTcGVs",
          "bFJlc3BvbnNlEhwKCXVuaXRJbmZvcxgBIAMoCzIJLlVuaXRJbmZvIj8KH1My",
          "Q0VuZW15QXR0YWNrU3BlbGxOb3RpZmljYXRpb24SHAoJdW5pdEluZm9zGAEg",
          "AygLMgkuVW5pdEluZm8iQQoTQzJTSGVhbFNwZWxsUmVxdWVzdBIZCgZjZW50",
          "ZXIYASABKAsyCS5Qb3NpdGlvbhIPCgd1bml0SWRzGAIgAygFIjQKFFMyQ0hl",
          "YWxTcGVsbFJlc3BvbnNlEhwKCXVuaXRJbmZvcxgBIAMoCzIJLlVuaXRJbmZv",
          "Ij0KHVMyQ0VuZW15SGVhbFNwZWxsTm90aWZpY2F0aW9uEhwKCXVuaXRJbmZv",
          "cxgBIAMoCzIJLlVuaXRJbmZvIkEKE0MyU0J1ZmZTcGVsbFJlcXVlc3QSGQoG",
          "Y2VudGVyGAEgASgLMgkuUG9zaXRpb24SDwoHdW5pdElkcxgCIAMoBSJRChRT",
          "MkNCdWZmU3BlbGxSZXNwb25zZRIPCgd1bml0SWRzGAEgAygFEhIKCmJ1ZmZB",
          "bW91bnQYAiABKAUSFAoMYnVmZkR1cmF0aW9uGAMgASgFIloKHVMyQ0VuZW15",
          "QnVmZlNwZWxsTm90aWZpY2F0aW9uEg8KB3VuaXRJZHMYASADKAUSEgoKYnVm",
          "ZkFtb3VudBgCIAEoBRIUCgxidWZmRHVyYXRpb24YAyABKAUiQQoTQzJTU3R1",
          "blNwZWxsUmVxdWVzdBIZCgZjZW50ZXIYASABKAsyCS5Qb3NpdGlvbhIPCgd1",
          "bml0SWRzGAIgAygFIj0KFFMyQ1N0dW5TcGVsbFJlc3BvbnNlEg8KB3VuaXRJ",
          "ZHMYASADKAUSFAoMc3R1bkR1cmF0aW9uGAIgASgFIkYKHVMyQ0VuZW15U3R1",
          "blNwZWxsTm90aWZpY2F0aW9uEg8KB3VuaXRJZHMYASADKAUSFAoMc3R1bkR1",
          "cmF0aW9uGAIgASgFIuwaCgpHYW1lUGFja2V0EjIKEWVycm9yTm90aWZpY2F0",
          "aW9uGAEgASgLMhUuUzJDRXJyb3JOb3RpZmljYXRpb25IABImCgthdXRoUmVx",
          "dWVzdBgCIAEoCzIPLkMyU0F1dGhSZXF1ZXN0SAASKAoMYXV0aFJlc3BvbnNl",
          "GAMgASgLMhAuUzJDQXV0aFJlc3BvbnNlSAASKAoMbWF0Y2hSZXF1ZXN0GB4g",
          "ASgLMhAuQzJTTWF0Y2hSZXF1ZXN0SAASMgoRbWF0Y2hOb3RpZmljYXRpb24Y",
          "HyABKAsyFS5TMkNNYXRjaE5vdGlmaWNhdGlvbkgAEjQKEm1hdGNoQ2FuY2Vs",
          "UmVxdWVzdBggIAEoCzIWLkMyU01hdGNoQ2FuY2VsUmVxdWVzdEgAEjAKEGdh",
          "bWVTdGFydFJlcXVlc3QYUCABKAsyFC5DMlNHYW1lU3RhcnRSZXF1ZXN0SAAS",
          "OgoVZ2FtZVN0YXJ0Tm90aWZpY2F0aW9uGFEgASgLMhkuUzJDR2FtZVN0YXJ0",
          "Tm90aWZpY2F0aW9uSAASPgoXcHVyY2hhc2VCdWlsZGluZ1JlcXVlc3QYWiAB",
          "KAsyGy5DMlNQdXJjaGFzZUJ1aWxkaW5nUmVxdWVzdEgAEkAKGHB1cmNoYXNl",
          "QnVpbGRpbmdSZXNwb25zZRhbIAEoCzIcLlMyQ1B1cmNoYXNlQnVpbGRpbmdS",
          "ZXNwb25zZUgAEkgKHGFkZEVuZW15QnVpbGRpbmdOb3RpZmljYXRpb24YXCAB",
          "KAsyIC5TMkNBZGRFbmVteUJ1aWxkaW5nTm90aWZpY2F0aW9uSAASMAoQc3Bh",
          "d25Vbml0UmVxdWVzdBhkIAEoCzIULkMyU1NwYXduVW5pdFJlcXVlc3RIABIy",
          "ChFzcGF3blVuaXRSZXNwb25zZRhlIAEoCzIVLlMyQ1NwYXduVW5pdFJlc3Bv",
          "bnNlSAASRAoac3Bhd25FbmVteVVuaXROb3RpZmljYXRpb24YZiABKAsyHi5T",
          "MkNTcGF3bkVuZW15VW5pdE5vdGlmaWNhdGlvbkgAEjMKEWF0dGFja1VuaXRS",
          "ZXF1ZXN0GMgBIAEoCzIVLkMyU0F0dGFja1VuaXRSZXF1ZXN0SAASPQoWYXR0",
          "YWNrVW5pdE5vdGlmaWNhdGlvbhjJASABKAsyGi5TMkNBdHRhY2tVbml0Tm90",
          "aWZpY2F0aW9uSAASMwoRZGFtYWdlVW5pdFJlcXVlc3QYrAIgASgLMhUuQzJT",
          "RGFtYWdlVW5pdFJlcXVlc3RIABI9ChZkYW1hZ2VVbml0Tm90aWZpY2F0aW9u",
          "GK0CIAEoCzIaLlMyQ0RhbWFnZVVuaXROb3RpZmljYXRpb25IABI7ChV1bml0",
          "RGVhdGhOb3RpZmljYXRpb24YkAMgASgLMhkuUzJDVW5pdERlYXRoTm90aWZp",
          "Y2F0aW9uSAASRwobZW50ZXJDaGVja3BvaW50Tm90aWZpY2F0aW9uGPQDIAEo",
          "CzIfLkMyU0VudGVyQ2hlY2twb2ludE5vdGlmaWNhdGlvbkgAEkUKGmV4aXRD",
          "aGVja3BvaW50Tm90aWZpY2F0aW9uGPUDIAEoCzIeLkMyU0V4aXRDaGVja3Bv",
          "aW50Tm90aWZpY2F0aW9uSAASQwoZdHJ5T2NjdXBhdGlvbk5vdGlmaWNhdGlv",
          "bhj2AyABKAsyHS5TMkNUcnlPY2N1cGF0aW9uTm90aWZpY2F0aW9uSAASRwob",
          "cGF1c2VPY2N1cGF0aW9uTm90aWZpY2F0aW9uGPcDIAEoCzIfLlMyQ1BhdXNl",
          "T2NjdXBhdGlvbk5vdGlmaWNhdGlvbkgAElEKIG9jY3VwYXRpb25UaW1lclJl",
          "c2V0Tm90aWZpY2F0aW9uGPgDIAEoCzIkLlMyQ09jY3VwYXRpb25UaW1lclJl",
          "c2V0Tm90aWZpY2F0aW9uSAASSwodb2NjdXBhdGlvblN1Y2Nlc3NOb3RpZmlj",
          "YXRpb24Y+QMgASgLMiEuUzJDT2NjdXBhdGlvblN1Y2Nlc3NOb3RpZmljYXRp",
          "b25IABIzChFhdHRhY2tCYXNlUmVxdWVzdBjYBCABKAsyFS5DMlNBdHRhY2tC",
          "YXNlUmVxdWVzdEgAEjUKEmF0dGFja0Jhc2VSZXNwb25zZRjZBCABKAsyFi5T",
          "MkNBdHRhY2tCYXNlUmVzcG9uc2VIABJHChtlbmVteUF0dGFja0Jhc2VOb3Rp",
          "ZmljYXRpb24Y2gQgASgLMh8uUzJDRW5lbXlBdHRhY2tCYXNlTm90aWZpY2F0",
          "aW9uSAASMwoRZGFtYWdlQmFzZVJlcXVlc3QY2wQgASgLMhUuQzJTRGFtYWdl",
          "QmFzZVJlcXVlc3RIABI1ChJkYW1hZ2VCYXNlUmVzcG9uc2UY3AQgASgLMhYu",
          "UzJDRGFtYWdlQmFzZVJlc3BvbnNlSAASRwobZW5lbXlEYW1hZ2VCYXNlTm90",
          "aWZpY2F0aW9uGN0EIAEoCzIfLlMyQ0VuZW15RGFtYWdlQmFzZU5vdGlmaWNh",
          "dGlvbkgAEjkKFGdhbWVPdmVyTm90aWZpY2F0aW9uGLwFIAEoCzIYLlMyQ0dh",
          "bWVPdmVyTm90aWZpY2F0aW9uSAASNwoTZ2FtZUVuZE5vdGlmaWNhdGlvbhi9",
          "BSABKAsyFy5DMlNHYW1lRW5kTm90aWZpY2F0aW9uSAASOQoUbG9jYXRpb25O",
          "b3RpZmljYXRpb24YoAYgASgLMhguQzJTTG9jYXRpb25Ob3RpZmljYXRpb25I",
          "ABJBChhsb2NhdGlvblN5bmNOb3RpZmljYXRpb24YoQYgASgLMhwuUzJDTG9j",
          "YXRpb25TeW5jTm90aWZpY2F0aW9uSAASPwoXbWluZXJhbFN5bmNOb3RpZmlj",
          "YXRpb24YhAcgASgLMhsuUzJDTWluZXJhbFN5bmNOb3RpZmljYXRpb25IABIv",
          "Cg9oZWFsVW5pdFJlcXVlc3QY6AcgASgLMhMuQzJTSGVhbFVuaXRSZXF1ZXN0",
          "SAASOQoUSGVhbFVuaXROb3RpZmljYXRpb24Y6QcgASgLMhguUzJDSGVhbFVu",
          "aXROb3RpZmljYXRpb25IABIvCg9idWZmVW5pdFJlcXVlc3QYzAggASgLMhMu",
          "QzJTQnVmZlVuaXRSZXF1ZXN0SAASOQoUQnVmZlVuaXROb3RpZmljYXRpb24Y",
          "zQggASgLMhguUzJDQnVmZlVuaXROb3RpZmljYXRpb25IABJDChl1bml0QW5p",
          "bWF0aW9uTm90aWZpY2F0aW9uGLAJIAEoCzIdLkMyU1VuaXRBbmltYXRpb25O",
          "b3RpZmljYXRpb25IABJNCh5lbmVteVVuaXRBbmltYXRpb25Ob3RpZmljYXRp",
          "b24YsQkgASgLMiIuUzJDRW5lbXlVbml0QW5pbWF0aW9uTm90aWZpY2F0aW9u",
          "SAASLwoPZHJhd0NhcmRSZXF1ZXN0GJQKIAEoCzITLkMyU0RyYXdDYXJkUmVx",
          "dWVzdEgAEjEKEGRyYXdDYXJkUmVzcG9uc2UYlQogASgLMhQuUzJDRHJhd0Nh",
          "cmRSZXNwb25zZUgAEjsKFWVsaXRlQ2FyZE5vdGlmaWNhdGlvbhiWCiABKAsy",
          "GS5TMkNFbGl0ZUNhcmROb3RpZmljYXRpb25IABI1ChJhdHRhY2tTcGVsbFJl",
          "cXVlc3QY+AogASgLMhYuQzJTQXR0YWNrU3BlbGxSZXF1ZXN0SAASNwoTYXR0",
          "YWNrU3BlbGxSZXNwb25zZRj5CiABKAsyFy5TMkNBdHRhY2tTcGVsbFJlc3Bv",
          "bnNlSAASSQocZW5lbXlBdHRhY2tTcGVsbE5vdGlmaWNhdGlvbhj6CiABKAsy",
          "IC5TMkNFbmVteUF0dGFja1NwZWxsTm90aWZpY2F0aW9uSAASMQoQaGVhbFNw",
          "ZWxsUmVxdWVzdBj7CiABKAsyFC5DMlNIZWFsU3BlbGxSZXF1ZXN0SAASMwoR",
          "aGVhbFNwZWxsUmVzcG9uc2UY/AogASgLMhUuUzJDSGVhbFNwZWxsUmVzcG9u",
          "c2VIABJFChplbmVteUhlYWxTcGVsbE5vdGlmaWNhdGlvbhj9CiABKAsyHi5T",
          "MkNFbmVteUhlYWxTcGVsbE5vdGlmaWNhdGlvbkgAEjEKEGJ1ZmZTcGVsbFJl",
          "cXVlc3QY/gogASgLMhQuQzJTQnVmZlNwZWxsUmVxdWVzdEgAEjMKEWJ1ZmZT",
          "cGVsbFJlc3BvbnNlGP8KIAEoCzIVLlMyQ0J1ZmZTcGVsbFJlc3BvbnNlSAAS",
          "RQoaZW5lbXlCdWZmU3BlbGxOb3RpZmljYXRpb24YgAsgASgLMh4uUzJDRW5l",
          "bXlCdWZmU3BlbGxOb3RpZmljYXRpb25IABIxChBzdHVuU3BlbGxSZXF1ZXN0",
          "GIELIAEoCzIULkMyU1N0dW5TcGVsbFJlcXVlc3RIABIzChFzdHVuU3BlbGxS",
          "ZXNwb25zZRiCCyABKAsyFS5TMkNTdHVuU3BlbGxSZXNwb25zZUgAEkUKGmVu",
          "ZW15U3R1blNwZWxsTm90aWZpY2F0aW9uGIMLIAEoCzIeLlMyQ0VuZW15U3R1",
          "blNwZWxsTm90aWZpY2F0aW9uSABCCQoHcGF5bG9hZGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Position), global::Position.Parser, new[]{ "X", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Rotation), global::Rotation.Parser, new[]{ "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnitPosition), global::UnitPosition.Parser, new[]{ "UnitId", "Position", "Rotation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnitInfo), global::UnitInfo.Parser, new[]{ "UnitId", "UnitHp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CErrorNotification), global::S2CErrorNotification.Parser, new[]{ "ErrorCode", "ErrorMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SAuthRequest), global::C2SAuthRequest.Parser, new[]{ "Token" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CAuthResponse), global::S2CAuthResponse.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SMatchRequest), global::C2SMatchRequest.Parser, new[]{ "Species" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CMatchNotification), global::S2CMatchNotification.Parser, new[]{ "OpponentId", "Port" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SMatchCancelRequest), global::C2SMatchCancelRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SGameStartRequest), global::C2SGameStartRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGameStartNotification), global::S2CGameStartNotification.Parser, new[]{ "Species" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SPurchaseBuildingRequest), global::C2SPurchaseBuildingRequest.Parser, new[]{ "AssetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CPurchaseBuildingResponse), global::S2CPurchaseBuildingResponse.Parser, new[]{ "AssetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CAddEnemyBuildingNotification), global::S2CAddEnemyBuildingNotification.Parser, new[]{ "AssetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SSpawnUnitRequest), global::C2SSpawnUnitRequest.Parser, new[]{ "AssetId", "ToTop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CSpawnUnitResponse), global::S2CSpawnUnitResponse.Parser, new[]{ "AssetId", "UnitId", "ToTop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CSpawnEnemyUnitNotification), global::S2CSpawnEnemyUnitNotification.Parser, new[]{ "AssetId", "UnitId", "ToTop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SAttackUnitRequest), global::C2SAttackUnitRequest.Parser, new[]{ "AttackingUnitId", "TargetUnitIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CAttackUnitNotification), global::S2CAttackUnitNotification.Parser, new[]{ "AttackingUnitId", "TargetUnitIds", "Success" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SDamageUnitRequest), global::C2SDamageUnitRequest.Parser, new[]{ "AttackingUnitId", "TargetUnitId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CDamageUnitNotification), global::S2CDamageUnitNotification.Parser, new[]{ "UnitInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CUnitDeathNotification), global::S2CUnitDeathNotification.Parser, new[]{ "UnitIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SEnterCheckpointNotification), global::C2SEnterCheckpointNotification.Parser, new[]{ "UnitId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SExitCheckpointNotification), global::C2SExitCheckpointNotification.Parser, new[]{ "UnitId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CTryOccupationNotification), global::S2CTryOccupationNotification.Parser, new[]{ "IsTop", "IsOpponent" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CPauseOccupationNotification), global::S2CPauseOccupationNotification.Parser, new[]{ "IsTop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2COccupationTimerResetNotification), global::S2COccupationTimerResetNotification.Parser, new[]{ "IsTop" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2COccupationSuccessNotification), global::S2COccupationSuccessNotification.Parser, new[]{ "IsTop", "IsOpponent" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SAttackBaseRequest), global::C2SAttackBaseRequest.Parser, new[]{ "UnitId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CAttackBaseResponse), global::S2CAttackBaseResponse.Parser, new[]{ "UnitId", "Success" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyAttackBaseNotification), global::S2CEnemyAttackBaseNotification.Parser, new[]{ "UnitId", "Success" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SDamageBaseRequest), global::C2SDamageBaseRequest.Parser, new[]{ "UnitId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CDamageBaseResponse), global::S2CDamageBaseResponse.Parser, new[]{ "BaseHp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyDamageBaseNotification), global::S2CEnemyDamageBaseNotification.Parser, new[]{ "BaseHp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CGameOverNotification), global::S2CGameOverNotification.Parser, new[]{ "IsWin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SGameEndNotification), global::C2SGameEndNotification.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SLocationNotification), global::C2SLocationNotification.Parser, new[]{ "UnitPositions" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CLocationSyncNotification), global::S2CLocationSyncNotification.Parser, new[]{ "UnitPositions" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CMineralSyncNotification), global::S2CMineralSyncNotification.Parser, new[]{ "Mineral" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SHealUnitRequest), global::C2SHealUnitRequest.Parser, new[]{ "UnitId", "TargetId", "HealAmount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CHealUnitNotification), global::S2CHealUnitNotification.Parser, new[]{ "UnitId", "UnitHp", "Success" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SBuffUnitRequest), global::C2SBuffUnitRequest.Parser, new[]{ "UnitId", "TargetIds", "BuffAmount", "BuffDuration" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CBuffUnitNotification), global::S2CBuffUnitNotification.Parser, new[]{ "UnitIds", "BuffAmount", "BuffDuration", "Success" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SUnitAnimationNotification), global::C2SUnitAnimationNotification.Parser, new[]{ "UnitId", "AnimationId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyUnitAnimationNotification), global::S2CEnemyUnitAnimationNotification.Parser, new[]{ "UnitId", "AnimationId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SDrawCardRequest), global::C2SDrawCardRequest.Parser, new[]{ "ButtonType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CDrawCardResponse), global::S2CDrawCardResponse.Parser, new[]{ "AssetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEliteCardNotification), global::S2CEliteCardNotification.Parser, new[]{ "ConsumedAssetId", "EliteAssetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SAttackSpellRequest), global::C2SAttackSpellRequest.Parser, new[]{ "Center", "UnitIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CAttackSpellResponse), global::S2CAttackSpellResponse.Parser, new[]{ "UnitInfos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyAttackSpellNotification), global::S2CEnemyAttackSpellNotification.Parser, new[]{ "UnitInfos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SHealSpellRequest), global::C2SHealSpellRequest.Parser, new[]{ "Center", "UnitIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CHealSpellResponse), global::S2CHealSpellResponse.Parser, new[]{ "UnitInfos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyHealSpellNotification), global::S2CEnemyHealSpellNotification.Parser, new[]{ "UnitInfos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SBuffSpellRequest), global::C2SBuffSpellRequest.Parser, new[]{ "Center", "UnitIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CBuffSpellResponse), global::S2CBuffSpellResponse.Parser, new[]{ "UnitIds", "BuffAmount", "BuffDuration" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyBuffSpellNotification), global::S2CEnemyBuffSpellNotification.Parser, new[]{ "UnitIds", "BuffAmount", "BuffDuration" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C2SStunSpellRequest), global::C2SStunSpellRequest.Parser, new[]{ "Center", "UnitIds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CStunSpellResponse), global::S2CStunSpellResponse.Parser, new[]{ "UnitIds", "StunDuration" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::S2CEnemyStunSpellNotification), global::S2CEnemyStunSpellNotification.Parser, new[]{ "UnitIds", "StunDuration" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GamePacket), global::GamePacket.Parser, new[]{ "ErrorNotification", "AuthRequest", "AuthResponse", "MatchRequest", "MatchNotification", "MatchCancelRequest", "GameStartRequest", "GameStartNotification", "PurchaseBuildingRequest", "PurchaseBuildingResponse", "AddEnemyBuildingNotification", "SpawnUnitRequest", "SpawnUnitResponse", "SpawnEnemyUnitNotification", "AttackUnitRequest", "AttackUnitNotification", "DamageUnitRequest", "DamageUnitNotification", "UnitDeathNotification", "EnterCheckpointNotification", "ExitCheckpointNotification", "TryOccupationNotification", "PauseOccupationNotification", "OccupationTimerResetNotification", "OccupationSuccessNotification", "AttackBaseRequest", "AttackBaseResponse", "EnemyAttackBaseNotification", "DamageBaseRequest", "DamageBaseResponse", "EnemyDamageBaseNotification", "GameOverNotification", "GameEndNotification", "LocationNotification", "LocationSyncNotification", "MineralSyncNotification", "HealUnitRequest", "HealUnitNotification", "BuffUnitRequest", "BuffUnitNotification", "UnitAnimationNotification", "EnemyUnitAnimationNotification", "DrawCardRequest", "DrawCardResponse", "EliteCardNotification", "AttackSpellRequest", "AttackSpellResponse", "EnemyAttackSpellNotification", "HealSpellRequest", "HealSpellResponse", "EnemyHealSpellNotification", "BuffSpellRequest", "BuffSpellResponse", "EnemyBuffSpellNotification", "StunSpellRequest", "StunSpellResponse", "EnemyStunSpellNotification" }, new[]{ "Payload" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///
///게임 데이터 명세
/// </summary>
public sealed partial class Position : pb::IMessage<Position> {
  private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Position> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position(Position other) : this() {
    x_ = other.x_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position Clone() {
    return new Position(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 2;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Position);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Position other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Z != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Position other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Rotation : pb::IMessage<Rotation> {
  private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rotation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rotation(Rotation other) : this() {
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rotation Clone() {
    return new Rotation(this);
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 1;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Rotation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Rotation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Y != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Rotation other) {
    if (other == null) {
      return;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class UnitPosition : pb::IMessage<UnitPosition> {
  private static readonly pb::MessageParser<UnitPosition> _parser = new pb::MessageParser<UnitPosition>(() => new UnitPosition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnitPosition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnitPosition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnitPosition(UnitPosition other) : this() {
    unitId_ = other.unitId_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnitPosition Clone() {
    return new UnitPosition(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::Position position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Position Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private global::Rotation rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Rotation Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnitPosition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnitPosition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(Rotation, other.Rotation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (rotation_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Rotation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnitPosition other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Position();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        Rotation = new global::Rotation();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 18: {
          if (position_ == null) {
            Position = new global::Position();
          }
          input.ReadMessage(Position);
          break;
        }
        case 26: {
          if (rotation_ == null) {
            Rotation = new global::Rotation();
          }
          input.ReadMessage(Rotation);
          break;
        }
      }
    }
  }

}

public sealed partial class UnitInfo : pb::IMessage<UnitInfo> {
  private static readonly pb::MessageParser<UnitInfo> _parser = new pb::MessageParser<UnitInfo>(() => new UnitInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnitInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnitInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnitInfo(UnitInfo other) : this() {
    unitId_ = other.unitId_;
    unitHp_ = other.unitHp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnitInfo Clone() {
    return new UnitInfo(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "unitHp" field.</summary>
  public const int UnitHpFieldNumber = 2;
  private int unitHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitHp {
    get { return unitHp_; }
    set {
      unitHp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnitInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnitInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (UnitHp != other.UnitHp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (UnitHp != 0) hash ^= UnitHp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (UnitHp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UnitHp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (UnitHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitHp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnitInfo other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.UnitHp != 0) {
      UnitHp = other.UnitHp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 16: {
          UnitHp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 
///패킷 명세
/// </summary>
public sealed partial class S2CErrorNotification : pb::IMessage<S2CErrorNotification> {
  private static readonly pb::MessageParser<S2CErrorNotification> _parser = new pb::MessageParser<S2CErrorNotification>(() => new S2CErrorNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CErrorNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CErrorNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CErrorNotification(S2CErrorNotification other) : this() {
    errorCode_ = other.errorCode_;
    errorMessage_ = other.errorMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CErrorNotification Clone() {
    return new S2CErrorNotification(this);
  }

  /// <summary>Field number for the "errorCode" field.</summary>
  public const int ErrorCodeFieldNumber = 1;
  private int errorCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ErrorCode {
    get { return errorCode_; }
    set {
      errorCode_ = value;
    }
  }

  /// <summary>Field number for the "errorMessage" field.</summary>
  public const int ErrorMessageFieldNumber = 2;
  private string errorMessage_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMessage {
    get { return errorMessage_; }
    set {
      errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CErrorNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CErrorNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ErrorCode != other.ErrorCode) return false;
    if (ErrorMessage != other.ErrorMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
    if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ErrorCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ErrorCode);
    }
    if (ErrorMessage.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ErrorCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
    }
    if (ErrorMessage.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CErrorNotification other) {
    if (other == null) {
      return;
    }
    if (other.ErrorCode != 0) {
      ErrorCode = other.ErrorCode;
    }
    if (other.ErrorMessage.Length != 0) {
      ErrorMessage = other.ErrorMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ErrorCode = input.ReadInt32();
          break;
        }
        case 18: {
          ErrorMessage = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SAuthRequest : pb::IMessage<C2SAuthRequest> {
  private static readonly pb::MessageParser<C2SAuthRequest> _parser = new pb::MessageParser<C2SAuthRequest>(() => new C2SAuthRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SAuthRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAuthRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAuthRequest(C2SAuthRequest other) : this() {
    token_ = other.token_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAuthRequest Clone() {
    return new C2SAuthRequest(this);
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 1;
  private string token_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SAuthRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SAuthRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Token != other.Token) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Token.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Token);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SAuthRequest other) {
    if (other == null) {
      return;
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Token = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CAuthResponse : pb::IMessage<S2CAuthResponse> {
  private static readonly pb::MessageParser<S2CAuthResponse> _parser = new pb::MessageParser<S2CAuthResponse>(() => new S2CAuthResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CAuthResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAuthResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAuthResponse(S2CAuthResponse other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAuthResponse Clone() {
    return new S2CAuthResponse(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CAuthResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CAuthResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CAuthResponse other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class C2SMatchRequest : pb::IMessage<C2SMatchRequest> {
  private static readonly pb::MessageParser<C2SMatchRequest> _parser = new pb::MessageParser<C2SMatchRequest>(() => new C2SMatchRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SMatchRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchRequest(C2SMatchRequest other) : this() {
    species_ = other.species_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchRequest Clone() {
    return new C2SMatchRequest(this);
  }

  /// <summary>Field number for the "species" field.</summary>
  public const int SpeciesFieldNumber = 1;
  private string species_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Species {
    get { return species_; }
    set {
      species_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SMatchRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SMatchRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Species != other.Species) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Species.Length != 0) hash ^= Species.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Species.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Species);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Species.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Species);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SMatchRequest other) {
    if (other == null) {
      return;
    }
    if (other.Species.Length != 0) {
      Species = other.Species;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Species = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CMatchNotification : pb::IMessage<S2CMatchNotification> {
  private static readonly pb::MessageParser<S2CMatchNotification> _parser = new pb::MessageParser<S2CMatchNotification>(() => new S2CMatchNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CMatchNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMatchNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMatchNotification(S2CMatchNotification other) : this() {
    opponentId_ = other.opponentId_;
    port_ = other.port_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMatchNotification Clone() {
    return new S2CMatchNotification(this);
  }

  /// <summary>Field number for the "opponentId" field.</summary>
  public const int OpponentIdFieldNumber = 1;
  private string opponentId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OpponentId {
    get { return opponentId_; }
    set {
      opponentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 2;
  private int port_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Port {
    get { return port_; }
    set {
      port_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CMatchNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CMatchNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OpponentId != other.OpponentId) return false;
    if (Port != other.Port) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OpponentId.Length != 0) hash ^= OpponentId.GetHashCode();
    if (Port != 0) hash ^= Port.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OpponentId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OpponentId);
    }
    if (Port != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Port);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OpponentId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OpponentId);
    }
    if (Port != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CMatchNotification other) {
    if (other == null) {
      return;
    }
    if (other.OpponentId.Length != 0) {
      OpponentId = other.OpponentId;
    }
    if (other.Port != 0) {
      Port = other.Port;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          OpponentId = input.ReadString();
          break;
        }
        case 16: {
          Port = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SMatchCancelRequest : pb::IMessage<C2SMatchCancelRequest> {
  private static readonly pb::MessageParser<C2SMatchCancelRequest> _parser = new pb::MessageParser<C2SMatchCancelRequest>(() => new C2SMatchCancelRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SMatchCancelRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchCancelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchCancelRequest(C2SMatchCancelRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SMatchCancelRequest Clone() {
    return new C2SMatchCancelRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SMatchCancelRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SMatchCancelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SMatchCancelRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class C2SGameStartRequest : pb::IMessage<C2SGameStartRequest> {
  private static readonly pb::MessageParser<C2SGameStartRequest> _parser = new pb::MessageParser<C2SGameStartRequest>(() => new C2SGameStartRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SGameStartRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameStartRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameStartRequest(C2SGameStartRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameStartRequest Clone() {
    return new C2SGameStartRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SGameStartRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SGameStartRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SGameStartRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class S2CGameStartNotification : pb::IMessage<S2CGameStartNotification> {
  private static readonly pb::MessageParser<S2CGameStartNotification> _parser = new pb::MessageParser<S2CGameStartNotification>(() => new S2CGameStartNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CGameStartNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameStartNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameStartNotification(S2CGameStartNotification other) : this() {
    species_ = other.species_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameStartNotification Clone() {
    return new S2CGameStartNotification(this);
  }

  /// <summary>Field number for the "species" field.</summary>
  public const int SpeciesFieldNumber = 1;
  private string species_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Species {
    get { return species_; }
    set {
      species_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CGameStartNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CGameStartNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Species != other.Species) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Species.Length != 0) hash ^= Species.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Species.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Species);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Species.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Species);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CGameStartNotification other) {
    if (other == null) {
      return;
    }
    if (other.Species.Length != 0) {
      Species = other.Species;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Species = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SPurchaseBuildingRequest : pb::IMessage<C2SPurchaseBuildingRequest> {
  private static readonly pb::MessageParser<C2SPurchaseBuildingRequest> _parser = new pb::MessageParser<C2SPurchaseBuildingRequest>(() => new C2SPurchaseBuildingRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SPurchaseBuildingRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SPurchaseBuildingRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SPurchaseBuildingRequest(C2SPurchaseBuildingRequest other) : this() {
    assetId_ = other.assetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SPurchaseBuildingRequest Clone() {
    return new C2SPurchaseBuildingRequest(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SPurchaseBuildingRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SPurchaseBuildingRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SPurchaseBuildingRequest other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CPurchaseBuildingResponse : pb::IMessage<S2CPurchaseBuildingResponse> {
  private static readonly pb::MessageParser<S2CPurchaseBuildingResponse> _parser = new pb::MessageParser<S2CPurchaseBuildingResponse>(() => new S2CPurchaseBuildingResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CPurchaseBuildingResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CPurchaseBuildingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CPurchaseBuildingResponse(S2CPurchaseBuildingResponse other) : this() {
    assetId_ = other.assetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CPurchaseBuildingResponse Clone() {
    return new S2CPurchaseBuildingResponse(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CPurchaseBuildingResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CPurchaseBuildingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CPurchaseBuildingResponse other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CAddEnemyBuildingNotification : pb::IMessage<S2CAddEnemyBuildingNotification> {
  private static readonly pb::MessageParser<S2CAddEnemyBuildingNotification> _parser = new pb::MessageParser<S2CAddEnemyBuildingNotification>(() => new S2CAddEnemyBuildingNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CAddEnemyBuildingNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAddEnemyBuildingNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAddEnemyBuildingNotification(S2CAddEnemyBuildingNotification other) : this() {
    assetId_ = other.assetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAddEnemyBuildingNotification Clone() {
    return new S2CAddEnemyBuildingNotification(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CAddEnemyBuildingNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CAddEnemyBuildingNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CAddEnemyBuildingNotification other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SSpawnUnitRequest : pb::IMessage<C2SSpawnUnitRequest> {
  private static readonly pb::MessageParser<C2SSpawnUnitRequest> _parser = new pb::MessageParser<C2SSpawnUnitRequest>(() => new C2SSpawnUnitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SSpawnUnitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SSpawnUnitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SSpawnUnitRequest(C2SSpawnUnitRequest other) : this() {
    assetId_ = other.assetId_;
    toTop_ = other.toTop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SSpawnUnitRequest Clone() {
    return new C2SSpawnUnitRequest(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  /// <summary>Field number for the "toTop" field.</summary>
  public const int ToTopFieldNumber = 2;
  private bool toTop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ToTop {
    get { return toTop_; }
    set {
      toTop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SSpawnUnitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SSpawnUnitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    if (ToTop != other.ToTop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (ToTop != false) hash ^= ToTop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (ToTop != false) {
      output.WriteRawTag(16);
      output.WriteBool(ToTop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (ToTop != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SSpawnUnitRequest other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    if (other.ToTop != false) {
      ToTop = other.ToTop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
        case 16: {
          ToTop = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CSpawnUnitResponse : pb::IMessage<S2CSpawnUnitResponse> {
  private static readonly pb::MessageParser<S2CSpawnUnitResponse> _parser = new pb::MessageParser<S2CSpawnUnitResponse>(() => new S2CSpawnUnitResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CSpawnUnitResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnUnitResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnUnitResponse(S2CSpawnUnitResponse other) : this() {
    assetId_ = other.assetId_;
    unitId_ = other.unitId_;
    toTop_ = other.toTop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnUnitResponse Clone() {
    return new S2CSpawnUnitResponse(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 2;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "toTop" field.</summary>
  public const int ToTopFieldNumber = 3;
  private bool toTop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ToTop {
    get { return toTop_; }
    set {
      toTop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CSpawnUnitResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CSpawnUnitResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    if (UnitId != other.UnitId) return false;
    if (ToTop != other.ToTop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (ToTop != false) hash ^= ToTop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (UnitId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UnitId);
    }
    if (ToTop != false) {
      output.WriteRawTag(24);
      output.WriteBool(ToTop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (ToTop != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CSpawnUnitResponse other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.ToTop != false) {
      ToTop = other.ToTop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
        case 16: {
          UnitId = input.ReadInt32();
          break;
        }
        case 24: {
          ToTop = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CSpawnEnemyUnitNotification : pb::IMessage<S2CSpawnEnemyUnitNotification> {
  private static readonly pb::MessageParser<S2CSpawnEnemyUnitNotification> _parser = new pb::MessageParser<S2CSpawnEnemyUnitNotification>(() => new S2CSpawnEnemyUnitNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CSpawnEnemyUnitNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnEnemyUnitNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnEnemyUnitNotification(S2CSpawnEnemyUnitNotification other) : this() {
    assetId_ = other.assetId_;
    unitId_ = other.unitId_;
    toTop_ = other.toTop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CSpawnEnemyUnitNotification Clone() {
    return new S2CSpawnEnemyUnitNotification(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 2;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "toTop" field.</summary>
  public const int ToTopFieldNumber = 3;
  private bool toTop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ToTop {
    get { return toTop_; }
    set {
      toTop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CSpawnEnemyUnitNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CSpawnEnemyUnitNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    if (UnitId != other.UnitId) return false;
    if (ToTop != other.ToTop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (ToTop != false) hash ^= ToTop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (UnitId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UnitId);
    }
    if (ToTop != false) {
      output.WriteRawTag(24);
      output.WriteBool(ToTop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (ToTop != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CSpawnEnemyUnitNotification other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.ToTop != false) {
      ToTop = other.ToTop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
        case 16: {
          UnitId = input.ReadInt32();
          break;
        }
        case 24: {
          ToTop = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SAttackUnitRequest : pb::IMessage<C2SAttackUnitRequest> {
  private static readonly pb::MessageParser<C2SAttackUnitRequest> _parser = new pb::MessageParser<C2SAttackUnitRequest>(() => new C2SAttackUnitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SAttackUnitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackUnitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackUnitRequest(C2SAttackUnitRequest other) : this() {
    attackingUnitId_ = other.attackingUnitId_;
    targetUnitIds_ = other.targetUnitIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackUnitRequest Clone() {
    return new C2SAttackUnitRequest(this);
  }

  /// <summary>Field number for the "attackingUnitId" field.</summary>
  public const int AttackingUnitIdFieldNumber = 1;
  private int attackingUnitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AttackingUnitId {
    get { return attackingUnitId_; }
    set {
      attackingUnitId_ = value;
    }
  }

  /// <summary>Field number for the "targetUnitIds" field.</summary>
  public const int TargetUnitIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_targetUnitIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> targetUnitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TargetUnitIds {
    get { return targetUnitIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SAttackUnitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SAttackUnitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttackingUnitId != other.AttackingUnitId) return false;
    if(!targetUnitIds_.Equals(other.targetUnitIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AttackingUnitId != 0) hash ^= AttackingUnitId.GetHashCode();
    hash ^= targetUnitIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AttackingUnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AttackingUnitId);
    }
    targetUnitIds_.WriteTo(output, _repeated_targetUnitIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AttackingUnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackingUnitId);
    }
    size += targetUnitIds_.CalculateSize(_repeated_targetUnitIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SAttackUnitRequest other) {
    if (other == null) {
      return;
    }
    if (other.AttackingUnitId != 0) {
      AttackingUnitId = other.AttackingUnitId;
    }
    targetUnitIds_.Add(other.targetUnitIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttackingUnitId = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          targetUnitIds_.AddEntriesFrom(input, _repeated_targetUnitIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CAttackUnitNotification : pb::IMessage<S2CAttackUnitNotification> {
  private static readonly pb::MessageParser<S2CAttackUnitNotification> _parser = new pb::MessageParser<S2CAttackUnitNotification>(() => new S2CAttackUnitNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CAttackUnitNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackUnitNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackUnitNotification(S2CAttackUnitNotification other) : this() {
    attackingUnitId_ = other.attackingUnitId_;
    targetUnitIds_ = other.targetUnitIds_.Clone();
    success_ = other.success_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackUnitNotification Clone() {
    return new S2CAttackUnitNotification(this);
  }

  /// <summary>Field number for the "attackingUnitId" field.</summary>
  public const int AttackingUnitIdFieldNumber = 1;
  private int attackingUnitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AttackingUnitId {
    get { return attackingUnitId_; }
    set {
      attackingUnitId_ = value;
    }
  }

  /// <summary>Field number for the "targetUnitIds" field.</summary>
  public const int TargetUnitIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_targetUnitIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> targetUnitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TargetUnitIds {
    get { return targetUnitIds_; }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 3;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CAttackUnitNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CAttackUnitNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttackingUnitId != other.AttackingUnitId) return false;
    if(!targetUnitIds_.Equals(other.targetUnitIds_)) return false;
    if (Success != other.Success) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AttackingUnitId != 0) hash ^= AttackingUnitId.GetHashCode();
    hash ^= targetUnitIds_.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AttackingUnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AttackingUnitId);
    }
    targetUnitIds_.WriteTo(output, _repeated_targetUnitIds_codec);
    if (Success != false) {
      output.WriteRawTag(24);
      output.WriteBool(Success);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AttackingUnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackingUnitId);
    }
    size += targetUnitIds_.CalculateSize(_repeated_targetUnitIds_codec);
    if (Success != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CAttackUnitNotification other) {
    if (other == null) {
      return;
    }
    if (other.AttackingUnitId != 0) {
      AttackingUnitId = other.AttackingUnitId;
    }
    targetUnitIds_.Add(other.targetUnitIds_);
    if (other.Success != false) {
      Success = other.Success;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttackingUnitId = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          targetUnitIds_.AddEntriesFrom(input, _repeated_targetUnitIds_codec);
          break;
        }
        case 24: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SDamageUnitRequest : pb::IMessage<C2SDamageUnitRequest> {
  private static readonly pb::MessageParser<C2SDamageUnitRequest> _parser = new pb::MessageParser<C2SDamageUnitRequest>(() => new C2SDamageUnitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SDamageUnitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDamageUnitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDamageUnitRequest(C2SDamageUnitRequest other) : this() {
    attackingUnitId_ = other.attackingUnitId_;
    targetUnitId_ = other.targetUnitId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDamageUnitRequest Clone() {
    return new C2SDamageUnitRequest(this);
  }

  /// <summary>Field number for the "attackingUnitId" field.</summary>
  public const int AttackingUnitIdFieldNumber = 1;
  private int attackingUnitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AttackingUnitId {
    get { return attackingUnitId_; }
    set {
      attackingUnitId_ = value;
    }
  }

  /// <summary>Field number for the "targetUnitId" field.</summary>
  public const int TargetUnitIdFieldNumber = 2;
  private int targetUnitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetUnitId {
    get { return targetUnitId_; }
    set {
      targetUnitId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SDamageUnitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SDamageUnitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AttackingUnitId != other.AttackingUnitId) return false;
    if (TargetUnitId != other.TargetUnitId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AttackingUnitId != 0) hash ^= AttackingUnitId.GetHashCode();
    if (TargetUnitId != 0) hash ^= TargetUnitId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AttackingUnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AttackingUnitId);
    }
    if (TargetUnitId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TargetUnitId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AttackingUnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackingUnitId);
    }
    if (TargetUnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SDamageUnitRequest other) {
    if (other == null) {
      return;
    }
    if (other.AttackingUnitId != 0) {
      AttackingUnitId = other.AttackingUnitId;
    }
    if (other.TargetUnitId != 0) {
      TargetUnitId = other.TargetUnitId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AttackingUnitId = input.ReadInt32();
          break;
        }
        case 16: {
          TargetUnitId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CDamageUnitNotification : pb::IMessage<S2CDamageUnitNotification> {
  private static readonly pb::MessageParser<S2CDamageUnitNotification> _parser = new pb::MessageParser<S2CDamageUnitNotification>(() => new S2CDamageUnitNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CDamageUnitNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDamageUnitNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDamageUnitNotification(S2CDamageUnitNotification other) : this() {
    unitInfo_ = other.unitInfo_ != null ? other.unitInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDamageUnitNotification Clone() {
    return new S2CDamageUnitNotification(this);
  }

  /// <summary>Field number for the "unitInfo" field.</summary>
  public const int UnitInfoFieldNumber = 1;
  private global::UnitInfo unitInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UnitInfo UnitInfo {
    get { return unitInfo_; }
    set {
      unitInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CDamageUnitNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CDamageUnitNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(UnitInfo, other.UnitInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (unitInfo_ != null) hash ^= UnitInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (unitInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(UnitInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (unitInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CDamageUnitNotification other) {
    if (other == null) {
      return;
    }
    if (other.unitInfo_ != null) {
      if (unitInfo_ == null) {
        UnitInfo = new global::UnitInfo();
      }
      UnitInfo.MergeFrom(other.UnitInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (unitInfo_ == null) {
            UnitInfo = new global::UnitInfo();
          }
          input.ReadMessage(UnitInfo);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CUnitDeathNotification : pb::IMessage<S2CUnitDeathNotification> {
  private static readonly pb::MessageParser<S2CUnitDeathNotification> _parser = new pb::MessageParser<S2CUnitDeathNotification>(() => new S2CUnitDeathNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CUnitDeathNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CUnitDeathNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CUnitDeathNotification(S2CUnitDeathNotification other) : this() {
    unitIds_ = other.unitIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CUnitDeathNotification Clone() {
    return new S2CUnitDeathNotification(this);
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CUnitDeathNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CUnitDeathNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitIds_.Equals(other.unitIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CUnitDeathNotification other) {
    if (other == null) {
      return;
    }
    unitIds_.Add(other.unitIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2SEnterCheckpointNotification : pb::IMessage<C2SEnterCheckpointNotification> {
  private static readonly pb::MessageParser<C2SEnterCheckpointNotification> _parser = new pb::MessageParser<C2SEnterCheckpointNotification>(() => new C2SEnterCheckpointNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SEnterCheckpointNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SEnterCheckpointNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SEnterCheckpointNotification(C2SEnterCheckpointNotification other) : this() {
    unitId_ = other.unitId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SEnterCheckpointNotification Clone() {
    return new C2SEnterCheckpointNotification(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SEnterCheckpointNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SEnterCheckpointNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SEnterCheckpointNotification other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SExitCheckpointNotification : pb::IMessage<C2SExitCheckpointNotification> {
  private static readonly pb::MessageParser<C2SExitCheckpointNotification> _parser = new pb::MessageParser<C2SExitCheckpointNotification>(() => new C2SExitCheckpointNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SExitCheckpointNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SExitCheckpointNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SExitCheckpointNotification(C2SExitCheckpointNotification other) : this() {
    unitId_ = other.unitId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SExitCheckpointNotification Clone() {
    return new C2SExitCheckpointNotification(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SExitCheckpointNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SExitCheckpointNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SExitCheckpointNotification other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CTryOccupationNotification : pb::IMessage<S2CTryOccupationNotification> {
  private static readonly pb::MessageParser<S2CTryOccupationNotification> _parser = new pb::MessageParser<S2CTryOccupationNotification>(() => new S2CTryOccupationNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CTryOccupationNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CTryOccupationNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CTryOccupationNotification(S2CTryOccupationNotification other) : this() {
    isTop_ = other.isTop_;
    isOpponent_ = other.isOpponent_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CTryOccupationNotification Clone() {
    return new S2CTryOccupationNotification(this);
  }

  /// <summary>Field number for the "isTop" field.</summary>
  public const int IsTopFieldNumber = 1;
  private bool isTop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTop {
    get { return isTop_; }
    set {
      isTop_ = value;
    }
  }

  /// <summary>Field number for the "isOpponent" field.</summary>
  public const int IsOpponentFieldNumber = 2;
  private bool isOpponent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOpponent {
    get { return isOpponent_; }
    set {
      isOpponent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CTryOccupationNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CTryOccupationNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsTop != other.IsTop) return false;
    if (IsOpponent != other.IsOpponent) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsTop != false) hash ^= IsTop.GetHashCode();
    if (IsOpponent != false) hash ^= IsOpponent.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsTop != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsTop);
    }
    if (IsOpponent != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsOpponent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsTop != false) {
      size += 1 + 1;
    }
    if (IsOpponent != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CTryOccupationNotification other) {
    if (other == null) {
      return;
    }
    if (other.IsTop != false) {
      IsTop = other.IsTop;
    }
    if (other.IsOpponent != false) {
      IsOpponent = other.IsOpponent;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsTop = input.ReadBool();
          break;
        }
        case 16: {
          IsOpponent = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CPauseOccupationNotification : pb::IMessage<S2CPauseOccupationNotification> {
  private static readonly pb::MessageParser<S2CPauseOccupationNotification> _parser = new pb::MessageParser<S2CPauseOccupationNotification>(() => new S2CPauseOccupationNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CPauseOccupationNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CPauseOccupationNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CPauseOccupationNotification(S2CPauseOccupationNotification other) : this() {
    isTop_ = other.isTop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CPauseOccupationNotification Clone() {
    return new S2CPauseOccupationNotification(this);
  }

  /// <summary>Field number for the "isTop" field.</summary>
  public const int IsTopFieldNumber = 1;
  private bool isTop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTop {
    get { return isTop_; }
    set {
      isTop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CPauseOccupationNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CPauseOccupationNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsTop != other.IsTop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsTop != false) hash ^= IsTop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsTop != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsTop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsTop != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CPauseOccupationNotification other) {
    if (other == null) {
      return;
    }
    if (other.IsTop != false) {
      IsTop = other.IsTop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsTop = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class S2COccupationTimerResetNotification : pb::IMessage<S2COccupationTimerResetNotification> {
  private static readonly pb::MessageParser<S2COccupationTimerResetNotification> _parser = new pb::MessageParser<S2COccupationTimerResetNotification>(() => new S2COccupationTimerResetNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2COccupationTimerResetNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2COccupationTimerResetNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2COccupationTimerResetNotification(S2COccupationTimerResetNotification other) : this() {
    isTop_ = other.isTop_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2COccupationTimerResetNotification Clone() {
    return new S2COccupationTimerResetNotification(this);
  }

  /// <summary>Field number for the "isTop" field.</summary>
  public const int IsTopFieldNumber = 1;
  private bool isTop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTop {
    get { return isTop_; }
    set {
      isTop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2COccupationTimerResetNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2COccupationTimerResetNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsTop != other.IsTop) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsTop != false) hash ^= IsTop.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsTop != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsTop);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsTop != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2COccupationTimerResetNotification other) {
    if (other == null) {
      return;
    }
    if (other.IsTop != false) {
      IsTop = other.IsTop;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsTop = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class S2COccupationSuccessNotification : pb::IMessage<S2COccupationSuccessNotification> {
  private static readonly pb::MessageParser<S2COccupationSuccessNotification> _parser = new pb::MessageParser<S2COccupationSuccessNotification>(() => new S2COccupationSuccessNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2COccupationSuccessNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2COccupationSuccessNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2COccupationSuccessNotification(S2COccupationSuccessNotification other) : this() {
    isTop_ = other.isTop_;
    isOpponent_ = other.isOpponent_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2COccupationSuccessNotification Clone() {
    return new S2COccupationSuccessNotification(this);
  }

  /// <summary>Field number for the "isTop" field.</summary>
  public const int IsTopFieldNumber = 1;
  private bool isTop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTop {
    get { return isTop_; }
    set {
      isTop_ = value;
    }
  }

  /// <summary>Field number for the "isOpponent" field.</summary>
  public const int IsOpponentFieldNumber = 2;
  private bool isOpponent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOpponent {
    get { return isOpponent_; }
    set {
      isOpponent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2COccupationSuccessNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2COccupationSuccessNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsTop != other.IsTop) return false;
    if (IsOpponent != other.IsOpponent) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsTop != false) hash ^= IsTop.GetHashCode();
    if (IsOpponent != false) hash ^= IsOpponent.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsTop != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsTop);
    }
    if (IsOpponent != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsOpponent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsTop != false) {
      size += 1 + 1;
    }
    if (IsOpponent != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2COccupationSuccessNotification other) {
    if (other == null) {
      return;
    }
    if (other.IsTop != false) {
      IsTop = other.IsTop;
    }
    if (other.IsOpponent != false) {
      IsOpponent = other.IsOpponent;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsTop = input.ReadBool();
          break;
        }
        case 16: {
          IsOpponent = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SAttackBaseRequest : pb::IMessage<C2SAttackBaseRequest> {
  private static readonly pb::MessageParser<C2SAttackBaseRequest> _parser = new pb::MessageParser<C2SAttackBaseRequest>(() => new C2SAttackBaseRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SAttackBaseRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackBaseRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackBaseRequest(C2SAttackBaseRequest other) : this() {
    unitId_ = other.unitId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackBaseRequest Clone() {
    return new C2SAttackBaseRequest(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SAttackBaseRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SAttackBaseRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SAttackBaseRequest other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CAttackBaseResponse : pb::IMessage<S2CAttackBaseResponse> {
  private static readonly pb::MessageParser<S2CAttackBaseResponse> _parser = new pb::MessageParser<S2CAttackBaseResponse>(() => new S2CAttackBaseResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CAttackBaseResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackBaseResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackBaseResponse(S2CAttackBaseResponse other) : this() {
    unitId_ = other.unitId_;
    success_ = other.success_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackBaseResponse Clone() {
    return new S2CAttackBaseResponse(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 2;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CAttackBaseResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CAttackBaseResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (Success != other.Success) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (Success != false) {
      output.WriteRawTag(16);
      output.WriteBool(Success);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (Success != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CAttackBaseResponse other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 16: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyAttackBaseNotification : pb::IMessage<S2CEnemyAttackBaseNotification> {
  private static readonly pb::MessageParser<S2CEnemyAttackBaseNotification> _parser = new pb::MessageParser<S2CEnemyAttackBaseNotification>(() => new S2CEnemyAttackBaseNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyAttackBaseNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyAttackBaseNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyAttackBaseNotification(S2CEnemyAttackBaseNotification other) : this() {
    unitId_ = other.unitId_;
    success_ = other.success_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyAttackBaseNotification Clone() {
    return new S2CEnemyAttackBaseNotification(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 2;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyAttackBaseNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyAttackBaseNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (Success != other.Success) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (Success != false) {
      output.WriteRawTag(16);
      output.WriteBool(Success);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (Success != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyAttackBaseNotification other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 16: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SDamageBaseRequest : pb::IMessage<C2SDamageBaseRequest> {
  private static readonly pb::MessageParser<C2SDamageBaseRequest> _parser = new pb::MessageParser<C2SDamageBaseRequest>(() => new C2SDamageBaseRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SDamageBaseRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDamageBaseRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDamageBaseRequest(C2SDamageBaseRequest other) : this() {
    unitId_ = other.unitId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDamageBaseRequest Clone() {
    return new C2SDamageBaseRequest(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SDamageBaseRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SDamageBaseRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SDamageBaseRequest other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CDamageBaseResponse : pb::IMessage<S2CDamageBaseResponse> {
  private static readonly pb::MessageParser<S2CDamageBaseResponse> _parser = new pb::MessageParser<S2CDamageBaseResponse>(() => new S2CDamageBaseResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CDamageBaseResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDamageBaseResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDamageBaseResponse(S2CDamageBaseResponse other) : this() {
    baseHp_ = other.baseHp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDamageBaseResponse Clone() {
    return new S2CDamageBaseResponse(this);
  }

  /// <summary>Field number for the "baseHp" field.</summary>
  public const int BaseHpFieldNumber = 1;
  private int baseHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaseHp {
    get { return baseHp_; }
    set {
      baseHp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CDamageBaseResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CDamageBaseResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BaseHp != other.BaseHp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BaseHp != 0) hash ^= BaseHp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BaseHp != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BaseHp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BaseHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseHp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CDamageBaseResponse other) {
    if (other == null) {
      return;
    }
    if (other.BaseHp != 0) {
      BaseHp = other.BaseHp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BaseHp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyDamageBaseNotification : pb::IMessage<S2CEnemyDamageBaseNotification> {
  private static readonly pb::MessageParser<S2CEnemyDamageBaseNotification> _parser = new pb::MessageParser<S2CEnemyDamageBaseNotification>(() => new S2CEnemyDamageBaseNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyDamageBaseNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyDamageBaseNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyDamageBaseNotification(S2CEnemyDamageBaseNotification other) : this() {
    baseHp_ = other.baseHp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyDamageBaseNotification Clone() {
    return new S2CEnemyDamageBaseNotification(this);
  }

  /// <summary>Field number for the "baseHp" field.</summary>
  public const int BaseHpFieldNumber = 1;
  private int baseHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BaseHp {
    get { return baseHp_; }
    set {
      baseHp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyDamageBaseNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyDamageBaseNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BaseHp != other.BaseHp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BaseHp != 0) hash ^= BaseHp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BaseHp != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BaseHp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BaseHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseHp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyDamageBaseNotification other) {
    if (other == null) {
      return;
    }
    if (other.BaseHp != 0) {
      BaseHp = other.BaseHp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BaseHp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CGameOverNotification : pb::IMessage<S2CGameOverNotification> {
  private static readonly pb::MessageParser<S2CGameOverNotification> _parser = new pb::MessageParser<S2CGameOverNotification>(() => new S2CGameOverNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CGameOverNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameOverNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameOverNotification(S2CGameOverNotification other) : this() {
    isWin_ = other.isWin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CGameOverNotification Clone() {
    return new S2CGameOverNotification(this);
  }

  /// <summary>Field number for the "isWin" field.</summary>
  public const int IsWinFieldNumber = 1;
  private bool isWin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsWin {
    get { return isWin_; }
    set {
      isWin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CGameOverNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CGameOverNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsWin != other.IsWin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsWin != false) hash ^= IsWin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsWin != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsWin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsWin != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CGameOverNotification other) {
    if (other == null) {
      return;
    }
    if (other.IsWin != false) {
      IsWin = other.IsWin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsWin = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SGameEndNotification : pb::IMessage<C2SGameEndNotification> {
  private static readonly pb::MessageParser<C2SGameEndNotification> _parser = new pb::MessageParser<C2SGameEndNotification>(() => new C2SGameEndNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SGameEndNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameEndNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameEndNotification(C2SGameEndNotification other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SGameEndNotification Clone() {
    return new C2SGameEndNotification(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SGameEndNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SGameEndNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SGameEndNotification other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class C2SLocationNotification : pb::IMessage<C2SLocationNotification> {
  private static readonly pb::MessageParser<C2SLocationNotification> _parser = new pb::MessageParser<C2SLocationNotification>(() => new C2SLocationNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SLocationNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SLocationNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SLocationNotification(C2SLocationNotification other) : this() {
    unitPositions_ = other.unitPositions_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SLocationNotification Clone() {
    return new C2SLocationNotification(this);
  }

  /// <summary>Field number for the "unitPositions" field.</summary>
  public const int UnitPositionsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UnitPosition> _repeated_unitPositions_codec
      = pb::FieldCodec.ForMessage(10, global::UnitPosition.Parser);
  private readonly pbc::RepeatedField<global::UnitPosition> unitPositions_ = new pbc::RepeatedField<global::UnitPosition>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UnitPosition> UnitPositions {
    get { return unitPositions_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SLocationNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SLocationNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitPositions_.Equals(other.unitPositions_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitPositions_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitPositions_.WriteTo(output, _repeated_unitPositions_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitPositions_.CalculateSize(_repeated_unitPositions_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SLocationNotification other) {
    if (other == null) {
      return;
    }
    unitPositions_.Add(other.unitPositions_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          unitPositions_.AddEntriesFrom(input, _repeated_unitPositions_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CLocationSyncNotification : pb::IMessage<S2CLocationSyncNotification> {
  private static readonly pb::MessageParser<S2CLocationSyncNotification> _parser = new pb::MessageParser<S2CLocationSyncNotification>(() => new S2CLocationSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CLocationSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CLocationSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CLocationSyncNotification(S2CLocationSyncNotification other) : this() {
    unitPositions_ = other.unitPositions_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CLocationSyncNotification Clone() {
    return new S2CLocationSyncNotification(this);
  }

  /// <summary>Field number for the "unitPositions" field.</summary>
  public const int UnitPositionsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UnitPosition> _repeated_unitPositions_codec
      = pb::FieldCodec.ForMessage(10, global::UnitPosition.Parser);
  private readonly pbc::RepeatedField<global::UnitPosition> unitPositions_ = new pbc::RepeatedField<global::UnitPosition>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UnitPosition> UnitPositions {
    get { return unitPositions_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CLocationSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CLocationSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitPositions_.Equals(other.unitPositions_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitPositions_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitPositions_.WriteTo(output, _repeated_unitPositions_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitPositions_.CalculateSize(_repeated_unitPositions_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CLocationSyncNotification other) {
    if (other == null) {
      return;
    }
    unitPositions_.Add(other.unitPositions_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          unitPositions_.AddEntriesFrom(input, _repeated_unitPositions_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CMineralSyncNotification : pb::IMessage<S2CMineralSyncNotification> {
  private static readonly pb::MessageParser<S2CMineralSyncNotification> _parser = new pb::MessageParser<S2CMineralSyncNotification>(() => new S2CMineralSyncNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CMineralSyncNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMineralSyncNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMineralSyncNotification(S2CMineralSyncNotification other) : this() {
    mineral_ = other.mineral_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CMineralSyncNotification Clone() {
    return new S2CMineralSyncNotification(this);
  }

  /// <summary>Field number for the "mineral" field.</summary>
  public const int MineralFieldNumber = 1;
  private int mineral_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mineral {
    get { return mineral_; }
    set {
      mineral_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CMineralSyncNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CMineralSyncNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Mineral != other.Mineral) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Mineral != 0) hash ^= Mineral.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Mineral != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Mineral);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Mineral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mineral);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CMineralSyncNotification other) {
    if (other == null) {
      return;
    }
    if (other.Mineral != 0) {
      Mineral = other.Mineral;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Mineral = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SHealUnitRequest : pb::IMessage<C2SHealUnitRequest> {
  private static readonly pb::MessageParser<C2SHealUnitRequest> _parser = new pb::MessageParser<C2SHealUnitRequest>(() => new C2SHealUnitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SHealUnitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SHealUnitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SHealUnitRequest(C2SHealUnitRequest other) : this() {
    unitId_ = other.unitId_;
    targetId_ = other.targetId_;
    healAmount_ = other.healAmount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SHealUnitRequest Clone() {
    return new C2SHealUnitRequest(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "targetId" field.</summary>
  public const int TargetIdFieldNumber = 2;
  private int targetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetId {
    get { return targetId_; }
    set {
      targetId_ = value;
    }
  }

  /// <summary>Field number for the "healAmount" field.</summary>
  public const int HealAmountFieldNumber = 3;
  private int healAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HealAmount {
    get { return healAmount_; }
    set {
      healAmount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SHealUnitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SHealUnitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (TargetId != other.TargetId) return false;
    if (HealAmount != other.HealAmount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (TargetId != 0) hash ^= TargetId.GetHashCode();
    if (HealAmount != 0) hash ^= HealAmount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (TargetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TargetId);
    }
    if (HealAmount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HealAmount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (TargetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
    }
    if (HealAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HealAmount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SHealUnitRequest other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.TargetId != 0) {
      TargetId = other.TargetId;
    }
    if (other.HealAmount != 0) {
      HealAmount = other.HealAmount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 16: {
          TargetId = input.ReadInt32();
          break;
        }
        case 24: {
          HealAmount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CHealUnitNotification : pb::IMessage<S2CHealUnitNotification> {
  private static readonly pb::MessageParser<S2CHealUnitNotification> _parser = new pb::MessageParser<S2CHealUnitNotification>(() => new S2CHealUnitNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CHealUnitNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CHealUnitNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CHealUnitNotification(S2CHealUnitNotification other) : this() {
    unitId_ = other.unitId_;
    unitHp_ = other.unitHp_;
    success_ = other.success_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CHealUnitNotification Clone() {
    return new S2CHealUnitNotification(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "unitHp" field.</summary>
  public const int UnitHpFieldNumber = 2;
  private int unitHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitHp {
    get { return unitHp_; }
    set {
      unitHp_ = value;
    }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 3;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CHealUnitNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CHealUnitNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (UnitHp != other.UnitHp) return false;
    if (Success != other.Success) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (UnitHp != 0) hash ^= UnitHp.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (UnitHp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UnitHp);
    }
    if (Success != false) {
      output.WriteRawTag(24);
      output.WriteBool(Success);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (UnitHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitHp);
    }
    if (Success != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CHealUnitNotification other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.UnitHp != 0) {
      UnitHp = other.UnitHp;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 16: {
          UnitHp = input.ReadInt32();
          break;
        }
        case 24: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SBuffUnitRequest : pb::IMessage<C2SBuffUnitRequest> {
  private static readonly pb::MessageParser<C2SBuffUnitRequest> _parser = new pb::MessageParser<C2SBuffUnitRequest>(() => new C2SBuffUnitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SBuffUnitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SBuffUnitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SBuffUnitRequest(C2SBuffUnitRequest other) : this() {
    unitId_ = other.unitId_;
    targetIds_ = other.targetIds_.Clone();
    buffAmount_ = other.buffAmount_;
    buffDuration_ = other.buffDuration_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SBuffUnitRequest Clone() {
    return new C2SBuffUnitRequest(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "targetIds" field.</summary>
  public const int TargetIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_targetIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> targetIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TargetIds {
    get { return targetIds_; }
  }

  /// <summary>Field number for the "buffAmount" field.</summary>
  public const int BuffAmountFieldNumber = 3;
  private int buffAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffAmount {
    get { return buffAmount_; }
    set {
      buffAmount_ = value;
    }
  }

  /// <summary>Field number for the "buffDuration" field.</summary>
  public const int BuffDurationFieldNumber = 4;
  private int buffDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffDuration {
    get { return buffDuration_; }
    set {
      buffDuration_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SBuffUnitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SBuffUnitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if(!targetIds_.Equals(other.targetIds_)) return false;
    if (BuffAmount != other.BuffAmount) return false;
    if (BuffDuration != other.BuffDuration) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    hash ^= targetIds_.GetHashCode();
    if (BuffAmount != 0) hash ^= BuffAmount.GetHashCode();
    if (BuffDuration != 0) hash ^= BuffDuration.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    targetIds_.WriteTo(output, _repeated_targetIds_codec);
    if (BuffAmount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BuffAmount);
    }
    if (BuffDuration != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BuffDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    size += targetIds_.CalculateSize(_repeated_targetIds_codec);
    if (BuffAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffAmount);
    }
    if (BuffDuration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffDuration);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SBuffUnitRequest other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    targetIds_.Add(other.targetIds_);
    if (other.BuffAmount != 0) {
      BuffAmount = other.BuffAmount;
    }
    if (other.BuffDuration != 0) {
      BuffDuration = other.BuffDuration;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          targetIds_.AddEntriesFrom(input, _repeated_targetIds_codec);
          break;
        }
        case 24: {
          BuffAmount = input.ReadInt32();
          break;
        }
        case 32: {
          BuffDuration = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CBuffUnitNotification : pb::IMessage<S2CBuffUnitNotification> {
  private static readonly pb::MessageParser<S2CBuffUnitNotification> _parser = new pb::MessageParser<S2CBuffUnitNotification>(() => new S2CBuffUnitNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CBuffUnitNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CBuffUnitNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CBuffUnitNotification(S2CBuffUnitNotification other) : this() {
    unitIds_ = other.unitIds_.Clone();
    buffAmount_ = other.buffAmount_;
    buffDuration_ = other.buffDuration_;
    success_ = other.success_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CBuffUnitNotification Clone() {
    return new S2CBuffUnitNotification(this);
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  /// <summary>Field number for the "buffAmount" field.</summary>
  public const int BuffAmountFieldNumber = 2;
  private int buffAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffAmount {
    get { return buffAmount_; }
    set {
      buffAmount_ = value;
    }
  }

  /// <summary>Field number for the "buffDuration" field.</summary>
  public const int BuffDurationFieldNumber = 3;
  private int buffDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffDuration {
    get { return buffDuration_; }
    set {
      buffDuration_ = value;
    }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 4;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CBuffUnitNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CBuffUnitNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitIds_.Equals(other.unitIds_)) return false;
    if (BuffAmount != other.BuffAmount) return false;
    if (BuffDuration != other.BuffDuration) return false;
    if (Success != other.Success) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitIds_.GetHashCode();
    if (BuffAmount != 0) hash ^= BuffAmount.GetHashCode();
    if (BuffDuration != 0) hash ^= BuffDuration.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (BuffAmount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BuffAmount);
    }
    if (BuffDuration != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BuffDuration);
    }
    if (Success != false) {
      output.WriteRawTag(32);
      output.WriteBool(Success);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (BuffAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffAmount);
    }
    if (BuffDuration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffDuration);
    }
    if (Success != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CBuffUnitNotification other) {
    if (other == null) {
      return;
    }
    unitIds_.Add(other.unitIds_);
    if (other.BuffAmount != 0) {
      BuffAmount = other.BuffAmount;
    }
    if (other.BuffDuration != 0) {
      BuffDuration = other.BuffDuration;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
        case 16: {
          BuffAmount = input.ReadInt32();
          break;
        }
        case 24: {
          BuffDuration = input.ReadInt32();
          break;
        }
        case 32: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SUnitAnimationNotification : pb::IMessage<C2SUnitAnimationNotification> {
  private static readonly pb::MessageParser<C2SUnitAnimationNotification> _parser = new pb::MessageParser<C2SUnitAnimationNotification>(() => new C2SUnitAnimationNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SUnitAnimationNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SUnitAnimationNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SUnitAnimationNotification(C2SUnitAnimationNotification other) : this() {
    unitId_ = other.unitId_;
    animationId_ = other.animationId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SUnitAnimationNotification Clone() {
    return new C2SUnitAnimationNotification(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "animationId" field.</summary>
  public const int AnimationIdFieldNumber = 2;
  private int animationId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AnimationId {
    get { return animationId_; }
    set {
      animationId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SUnitAnimationNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SUnitAnimationNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (AnimationId != other.AnimationId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (AnimationId != 0) hash ^= AnimationId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (AnimationId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AnimationId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (AnimationId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SUnitAnimationNotification other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.AnimationId != 0) {
      AnimationId = other.AnimationId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 16: {
          AnimationId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyUnitAnimationNotification : pb::IMessage<S2CEnemyUnitAnimationNotification> {
  private static readonly pb::MessageParser<S2CEnemyUnitAnimationNotification> _parser = new pb::MessageParser<S2CEnemyUnitAnimationNotification>(() => new S2CEnemyUnitAnimationNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyUnitAnimationNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyUnitAnimationNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyUnitAnimationNotification(S2CEnemyUnitAnimationNotification other) : this() {
    unitId_ = other.unitId_;
    animationId_ = other.animationId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyUnitAnimationNotification Clone() {
    return new S2CEnemyUnitAnimationNotification(this);
  }

  /// <summary>Field number for the "unitId" field.</summary>
  public const int UnitIdFieldNumber = 1;
  private int unitId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnitId {
    get { return unitId_; }
    set {
      unitId_ = value;
    }
  }

  /// <summary>Field number for the "animationId" field.</summary>
  public const int AnimationIdFieldNumber = 2;
  private int animationId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AnimationId {
    get { return animationId_; }
    set {
      animationId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyUnitAnimationNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyUnitAnimationNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnitId != other.UnitId) return false;
    if (AnimationId != other.AnimationId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnitId != 0) hash ^= UnitId.GetHashCode();
    if (AnimationId != 0) hash ^= AnimationId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnitId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UnitId);
    }
    if (AnimationId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AnimationId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnitId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
    }
    if (AnimationId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyUnitAnimationNotification other) {
    if (other == null) {
      return;
    }
    if (other.UnitId != 0) {
      UnitId = other.UnitId;
    }
    if (other.AnimationId != 0) {
      AnimationId = other.AnimationId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UnitId = input.ReadInt32();
          break;
        }
        case 16: {
          AnimationId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SDrawCardRequest : pb::IMessage<C2SDrawCardRequest> {
  private static readonly pb::MessageParser<C2SDrawCardRequest> _parser = new pb::MessageParser<C2SDrawCardRequest>(() => new C2SDrawCardRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SDrawCardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDrawCardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDrawCardRequest(C2SDrawCardRequest other) : this() {
    buttonType_ = other.buttonType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SDrawCardRequest Clone() {
    return new C2SDrawCardRequest(this);
  }

  /// <summary>Field number for the "buttonType" field.</summary>
  public const int ButtonTypeFieldNumber = 1;
  private int buttonType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ButtonType {
    get { return buttonType_; }
    set {
      buttonType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SDrawCardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SDrawCardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ButtonType != other.ButtonType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ButtonType != 0) hash ^= ButtonType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ButtonType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ButtonType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ButtonType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ButtonType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SDrawCardRequest other) {
    if (other == null) {
      return;
    }
    if (other.ButtonType != 0) {
      ButtonType = other.ButtonType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ButtonType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CDrawCardResponse : pb::IMessage<S2CDrawCardResponse> {
  private static readonly pb::MessageParser<S2CDrawCardResponse> _parser = new pb::MessageParser<S2CDrawCardResponse>(() => new S2CDrawCardResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CDrawCardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDrawCardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDrawCardResponse(S2CDrawCardResponse other) : this() {
    assetId_ = other.assetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CDrawCardResponse Clone() {
    return new S2CDrawCardResponse(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CDrawCardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CDrawCardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CDrawCardResponse other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEliteCardNotification : pb::IMessage<S2CEliteCardNotification> {
  private static readonly pb::MessageParser<S2CEliteCardNotification> _parser = new pb::MessageParser<S2CEliteCardNotification>(() => new S2CEliteCardNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEliteCardNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEliteCardNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEliteCardNotification(S2CEliteCardNotification other) : this() {
    consumedAssetId_ = other.consumedAssetId_;
    eliteAssetId_ = other.eliteAssetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEliteCardNotification Clone() {
    return new S2CEliteCardNotification(this);
  }

  /// <summary>Field number for the "consumedAssetId" field.</summary>
  public const int ConsumedAssetIdFieldNumber = 1;
  private int consumedAssetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConsumedAssetId {
    get { return consumedAssetId_; }
    set {
      consumedAssetId_ = value;
    }
  }

  /// <summary>Field number for the "eliteAssetId" field.</summary>
  public const int EliteAssetIdFieldNumber = 2;
  private int eliteAssetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EliteAssetId {
    get { return eliteAssetId_; }
    set {
      eliteAssetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEliteCardNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEliteCardNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConsumedAssetId != other.ConsumedAssetId) return false;
    if (EliteAssetId != other.EliteAssetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConsumedAssetId != 0) hash ^= ConsumedAssetId.GetHashCode();
    if (EliteAssetId != 0) hash ^= EliteAssetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConsumedAssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConsumedAssetId);
    }
    if (EliteAssetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(EliteAssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConsumedAssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsumedAssetId);
    }
    if (EliteAssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EliteAssetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEliteCardNotification other) {
    if (other == null) {
      return;
    }
    if (other.ConsumedAssetId != 0) {
      ConsumedAssetId = other.ConsumedAssetId;
    }
    if (other.EliteAssetId != 0) {
      EliteAssetId = other.EliteAssetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ConsumedAssetId = input.ReadInt32();
          break;
        }
        case 16: {
          EliteAssetId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SAttackSpellRequest : pb::IMessage<C2SAttackSpellRequest> {
  private static readonly pb::MessageParser<C2SAttackSpellRequest> _parser = new pb::MessageParser<C2SAttackSpellRequest>(() => new C2SAttackSpellRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SAttackSpellRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackSpellRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackSpellRequest(C2SAttackSpellRequest other) : this() {
    center_ = other.center_ != null ? other.center_.Clone() : null;
    unitIds_ = other.unitIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SAttackSpellRequest Clone() {
    return new C2SAttackSpellRequest(this);
  }

  /// <summary>Field number for the "center" field.</summary>
  public const int CenterFieldNumber = 1;
  private global::Position center_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Position Center {
    get { return center_; }
    set {
      center_ = value;
    }
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SAttackSpellRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SAttackSpellRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Center, other.Center)) return false;
    if(!unitIds_.Equals(other.unitIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (center_ != null) hash ^= Center.GetHashCode();
    hash ^= unitIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (center_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Center);
    }
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (center_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
    }
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SAttackSpellRequest other) {
    if (other == null) {
      return;
    }
    if (other.center_ != null) {
      if (center_ == null) {
        Center = new global::Position();
      }
      Center.MergeFrom(other.Center);
    }
    unitIds_.Add(other.unitIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (center_ == null) {
            Center = new global::Position();
          }
          input.ReadMessage(Center);
          break;
        }
        case 18:
        case 16: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CAttackSpellResponse : pb::IMessage<S2CAttackSpellResponse> {
  private static readonly pb::MessageParser<S2CAttackSpellResponse> _parser = new pb::MessageParser<S2CAttackSpellResponse>(() => new S2CAttackSpellResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CAttackSpellResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackSpellResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackSpellResponse(S2CAttackSpellResponse other) : this() {
    unitInfos_ = other.unitInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CAttackSpellResponse Clone() {
    return new S2CAttackSpellResponse(this);
  }

  /// <summary>Field number for the "unitInfos" field.</summary>
  public const int UnitInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UnitInfo> _repeated_unitInfos_codec
      = pb::FieldCodec.ForMessage(10, global::UnitInfo.Parser);
  private readonly pbc::RepeatedField<global::UnitInfo> unitInfos_ = new pbc::RepeatedField<global::UnitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UnitInfo> UnitInfos {
    get { return unitInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CAttackSpellResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CAttackSpellResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitInfos_.Equals(other.unitInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitInfos_.WriteTo(output, _repeated_unitInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitInfos_.CalculateSize(_repeated_unitInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CAttackSpellResponse other) {
    if (other == null) {
      return;
    }
    unitInfos_.Add(other.unitInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          unitInfos_.AddEntriesFrom(input, _repeated_unitInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyAttackSpellNotification : pb::IMessage<S2CEnemyAttackSpellNotification> {
  private static readonly pb::MessageParser<S2CEnemyAttackSpellNotification> _parser = new pb::MessageParser<S2CEnemyAttackSpellNotification>(() => new S2CEnemyAttackSpellNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyAttackSpellNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyAttackSpellNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyAttackSpellNotification(S2CEnemyAttackSpellNotification other) : this() {
    unitInfos_ = other.unitInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyAttackSpellNotification Clone() {
    return new S2CEnemyAttackSpellNotification(this);
  }

  /// <summary>Field number for the "unitInfos" field.</summary>
  public const int UnitInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UnitInfo> _repeated_unitInfos_codec
      = pb::FieldCodec.ForMessage(10, global::UnitInfo.Parser);
  private readonly pbc::RepeatedField<global::UnitInfo> unitInfos_ = new pbc::RepeatedField<global::UnitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UnitInfo> UnitInfos {
    get { return unitInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyAttackSpellNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyAttackSpellNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitInfos_.Equals(other.unitInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitInfos_.WriteTo(output, _repeated_unitInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitInfos_.CalculateSize(_repeated_unitInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyAttackSpellNotification other) {
    if (other == null) {
      return;
    }
    unitInfos_.Add(other.unitInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          unitInfos_.AddEntriesFrom(input, _repeated_unitInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2SHealSpellRequest : pb::IMessage<C2SHealSpellRequest> {
  private static readonly pb::MessageParser<C2SHealSpellRequest> _parser = new pb::MessageParser<C2SHealSpellRequest>(() => new C2SHealSpellRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SHealSpellRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SHealSpellRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SHealSpellRequest(C2SHealSpellRequest other) : this() {
    center_ = other.center_ != null ? other.center_.Clone() : null;
    unitIds_ = other.unitIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SHealSpellRequest Clone() {
    return new C2SHealSpellRequest(this);
  }

  /// <summary>Field number for the "center" field.</summary>
  public const int CenterFieldNumber = 1;
  private global::Position center_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Position Center {
    get { return center_; }
    set {
      center_ = value;
    }
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SHealSpellRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SHealSpellRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Center, other.Center)) return false;
    if(!unitIds_.Equals(other.unitIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (center_ != null) hash ^= Center.GetHashCode();
    hash ^= unitIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (center_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Center);
    }
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (center_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
    }
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SHealSpellRequest other) {
    if (other == null) {
      return;
    }
    if (other.center_ != null) {
      if (center_ == null) {
        Center = new global::Position();
      }
      Center.MergeFrom(other.Center);
    }
    unitIds_.Add(other.unitIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (center_ == null) {
            Center = new global::Position();
          }
          input.ReadMessage(Center);
          break;
        }
        case 18:
        case 16: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CHealSpellResponse : pb::IMessage<S2CHealSpellResponse> {
  private static readonly pb::MessageParser<S2CHealSpellResponse> _parser = new pb::MessageParser<S2CHealSpellResponse>(() => new S2CHealSpellResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CHealSpellResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CHealSpellResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CHealSpellResponse(S2CHealSpellResponse other) : this() {
    unitInfos_ = other.unitInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CHealSpellResponse Clone() {
    return new S2CHealSpellResponse(this);
  }

  /// <summary>Field number for the "unitInfos" field.</summary>
  public const int UnitInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UnitInfo> _repeated_unitInfos_codec
      = pb::FieldCodec.ForMessage(10, global::UnitInfo.Parser);
  private readonly pbc::RepeatedField<global::UnitInfo> unitInfos_ = new pbc::RepeatedField<global::UnitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UnitInfo> UnitInfos {
    get { return unitInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CHealSpellResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CHealSpellResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitInfos_.Equals(other.unitInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitInfos_.WriteTo(output, _repeated_unitInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitInfos_.CalculateSize(_repeated_unitInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CHealSpellResponse other) {
    if (other == null) {
      return;
    }
    unitInfos_.Add(other.unitInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          unitInfos_.AddEntriesFrom(input, _repeated_unitInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyHealSpellNotification : pb::IMessage<S2CEnemyHealSpellNotification> {
  private static readonly pb::MessageParser<S2CEnemyHealSpellNotification> _parser = new pb::MessageParser<S2CEnemyHealSpellNotification>(() => new S2CEnemyHealSpellNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyHealSpellNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyHealSpellNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyHealSpellNotification(S2CEnemyHealSpellNotification other) : this() {
    unitInfos_ = other.unitInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyHealSpellNotification Clone() {
    return new S2CEnemyHealSpellNotification(this);
  }

  /// <summary>Field number for the "unitInfos" field.</summary>
  public const int UnitInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UnitInfo> _repeated_unitInfos_codec
      = pb::FieldCodec.ForMessage(10, global::UnitInfo.Parser);
  private readonly pbc::RepeatedField<global::UnitInfo> unitInfos_ = new pbc::RepeatedField<global::UnitInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UnitInfo> UnitInfos {
    get { return unitInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyHealSpellNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyHealSpellNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitInfos_.Equals(other.unitInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitInfos_.WriteTo(output, _repeated_unitInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitInfos_.CalculateSize(_repeated_unitInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyHealSpellNotification other) {
    if (other == null) {
      return;
    }
    unitInfos_.Add(other.unitInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          unitInfos_.AddEntriesFrom(input, _repeated_unitInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class C2SBuffSpellRequest : pb::IMessage<C2SBuffSpellRequest> {
  private static readonly pb::MessageParser<C2SBuffSpellRequest> _parser = new pb::MessageParser<C2SBuffSpellRequest>(() => new C2SBuffSpellRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SBuffSpellRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SBuffSpellRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SBuffSpellRequest(C2SBuffSpellRequest other) : this() {
    center_ = other.center_ != null ? other.center_.Clone() : null;
    unitIds_ = other.unitIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SBuffSpellRequest Clone() {
    return new C2SBuffSpellRequest(this);
  }

  /// <summary>Field number for the "center" field.</summary>
  public const int CenterFieldNumber = 1;
  private global::Position center_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Position Center {
    get { return center_; }
    set {
      center_ = value;
    }
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SBuffSpellRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SBuffSpellRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Center, other.Center)) return false;
    if(!unitIds_.Equals(other.unitIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (center_ != null) hash ^= Center.GetHashCode();
    hash ^= unitIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (center_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Center);
    }
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (center_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
    }
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SBuffSpellRequest other) {
    if (other == null) {
      return;
    }
    if (other.center_ != null) {
      if (center_ == null) {
        Center = new global::Position();
      }
      Center.MergeFrom(other.Center);
    }
    unitIds_.Add(other.unitIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (center_ == null) {
            Center = new global::Position();
          }
          input.ReadMessage(Center);
          break;
        }
        case 18:
        case 16: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CBuffSpellResponse : pb::IMessage<S2CBuffSpellResponse> {
  private static readonly pb::MessageParser<S2CBuffSpellResponse> _parser = new pb::MessageParser<S2CBuffSpellResponse>(() => new S2CBuffSpellResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CBuffSpellResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CBuffSpellResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CBuffSpellResponse(S2CBuffSpellResponse other) : this() {
    unitIds_ = other.unitIds_.Clone();
    buffAmount_ = other.buffAmount_;
    buffDuration_ = other.buffDuration_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CBuffSpellResponse Clone() {
    return new S2CBuffSpellResponse(this);
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  /// <summary>Field number for the "buffAmount" field.</summary>
  public const int BuffAmountFieldNumber = 2;
  private int buffAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffAmount {
    get { return buffAmount_; }
    set {
      buffAmount_ = value;
    }
  }

  /// <summary>Field number for the "buffDuration" field.</summary>
  public const int BuffDurationFieldNumber = 3;
  private int buffDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffDuration {
    get { return buffDuration_; }
    set {
      buffDuration_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CBuffSpellResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CBuffSpellResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitIds_.Equals(other.unitIds_)) return false;
    if (BuffAmount != other.BuffAmount) return false;
    if (BuffDuration != other.BuffDuration) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitIds_.GetHashCode();
    if (BuffAmount != 0) hash ^= BuffAmount.GetHashCode();
    if (BuffDuration != 0) hash ^= BuffDuration.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (BuffAmount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BuffAmount);
    }
    if (BuffDuration != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BuffDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (BuffAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffAmount);
    }
    if (BuffDuration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffDuration);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CBuffSpellResponse other) {
    if (other == null) {
      return;
    }
    unitIds_.Add(other.unitIds_);
    if (other.BuffAmount != 0) {
      BuffAmount = other.BuffAmount;
    }
    if (other.BuffDuration != 0) {
      BuffDuration = other.BuffDuration;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
        case 16: {
          BuffAmount = input.ReadInt32();
          break;
        }
        case 24: {
          BuffDuration = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyBuffSpellNotification : pb::IMessage<S2CEnemyBuffSpellNotification> {
  private static readonly pb::MessageParser<S2CEnemyBuffSpellNotification> _parser = new pb::MessageParser<S2CEnemyBuffSpellNotification>(() => new S2CEnemyBuffSpellNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyBuffSpellNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyBuffSpellNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyBuffSpellNotification(S2CEnemyBuffSpellNotification other) : this() {
    unitIds_ = other.unitIds_.Clone();
    buffAmount_ = other.buffAmount_;
    buffDuration_ = other.buffDuration_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyBuffSpellNotification Clone() {
    return new S2CEnemyBuffSpellNotification(this);
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  /// <summary>Field number for the "buffAmount" field.</summary>
  public const int BuffAmountFieldNumber = 2;
  private int buffAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffAmount {
    get { return buffAmount_; }
    set {
      buffAmount_ = value;
    }
  }

  /// <summary>Field number for the "buffDuration" field.</summary>
  public const int BuffDurationFieldNumber = 3;
  private int buffDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffDuration {
    get { return buffDuration_; }
    set {
      buffDuration_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyBuffSpellNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyBuffSpellNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitIds_.Equals(other.unitIds_)) return false;
    if (BuffAmount != other.BuffAmount) return false;
    if (BuffDuration != other.BuffDuration) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitIds_.GetHashCode();
    if (BuffAmount != 0) hash ^= BuffAmount.GetHashCode();
    if (BuffDuration != 0) hash ^= BuffDuration.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (BuffAmount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BuffAmount);
    }
    if (BuffDuration != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BuffDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (BuffAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffAmount);
    }
    if (BuffDuration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffDuration);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyBuffSpellNotification other) {
    if (other == null) {
      return;
    }
    unitIds_.Add(other.unitIds_);
    if (other.BuffAmount != 0) {
      BuffAmount = other.BuffAmount;
    }
    if (other.BuffDuration != 0) {
      BuffDuration = other.BuffDuration;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
        case 16: {
          BuffAmount = input.ReadInt32();
          break;
        }
        case 24: {
          BuffDuration = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class C2SStunSpellRequest : pb::IMessage<C2SStunSpellRequest> {
  private static readonly pb::MessageParser<C2SStunSpellRequest> _parser = new pb::MessageParser<C2SStunSpellRequest>(() => new C2SStunSpellRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C2SStunSpellRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SStunSpellRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SStunSpellRequest(C2SStunSpellRequest other) : this() {
    center_ = other.center_ != null ? other.center_.Clone() : null;
    unitIds_ = other.unitIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C2SStunSpellRequest Clone() {
    return new C2SStunSpellRequest(this);
  }

  /// <summary>Field number for the "center" field.</summary>
  public const int CenterFieldNumber = 1;
  private global::Position center_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Position Center {
    get { return center_; }
    set {
      center_ = value;
    }
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C2SStunSpellRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C2SStunSpellRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Center, other.Center)) return false;
    if(!unitIds_.Equals(other.unitIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (center_ != null) hash ^= Center.GetHashCode();
    hash ^= unitIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (center_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Center);
    }
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (center_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
    }
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C2SStunSpellRequest other) {
    if (other == null) {
      return;
    }
    if (other.center_ != null) {
      if (center_ == null) {
        Center = new global::Position();
      }
      Center.MergeFrom(other.Center);
    }
    unitIds_.Add(other.unitIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (center_ == null) {
            Center = new global::Position();
          }
          input.ReadMessage(Center);
          break;
        }
        case 18:
        case 16: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class S2CStunSpellResponse : pb::IMessage<S2CStunSpellResponse> {
  private static readonly pb::MessageParser<S2CStunSpellResponse> _parser = new pb::MessageParser<S2CStunSpellResponse>(() => new S2CStunSpellResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CStunSpellResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CStunSpellResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CStunSpellResponse(S2CStunSpellResponse other) : this() {
    unitIds_ = other.unitIds_.Clone();
    stunDuration_ = other.stunDuration_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CStunSpellResponse Clone() {
    return new S2CStunSpellResponse(this);
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  /// <summary>Field number for the "stunDuration" field.</summary>
  public const int StunDurationFieldNumber = 2;
  private int stunDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StunDuration {
    get { return stunDuration_; }
    set {
      stunDuration_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CStunSpellResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CStunSpellResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitIds_.Equals(other.unitIds_)) return false;
    if (StunDuration != other.StunDuration) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitIds_.GetHashCode();
    if (StunDuration != 0) hash ^= StunDuration.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (StunDuration != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(StunDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (StunDuration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StunDuration);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CStunSpellResponse other) {
    if (other == null) {
      return;
    }
    unitIds_.Add(other.unitIds_);
    if (other.StunDuration != 0) {
      StunDuration = other.StunDuration;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
        case 16: {
          StunDuration = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class S2CEnemyStunSpellNotification : pb::IMessage<S2CEnemyStunSpellNotification> {
  private static readonly pb::MessageParser<S2CEnemyStunSpellNotification> _parser = new pb::MessageParser<S2CEnemyStunSpellNotification>(() => new S2CEnemyStunSpellNotification());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<S2CEnemyStunSpellNotification> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyStunSpellNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyStunSpellNotification(S2CEnemyStunSpellNotification other) : this() {
    unitIds_ = other.unitIds_.Clone();
    stunDuration_ = other.stunDuration_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public S2CEnemyStunSpellNotification Clone() {
    return new S2CEnemyStunSpellNotification(this);
  }

  /// <summary>Field number for the "unitIds" field.</summary>
  public const int UnitIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_unitIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> unitIds_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UnitIds {
    get { return unitIds_; }
  }

  /// <summary>Field number for the "stunDuration" field.</summary>
  public const int StunDurationFieldNumber = 2;
  private int stunDuration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StunDuration {
    get { return stunDuration_; }
    set {
      stunDuration_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as S2CEnemyStunSpellNotification);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(S2CEnemyStunSpellNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!unitIds_.Equals(other.unitIds_)) return false;
    if (StunDuration != other.StunDuration) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= unitIds_.GetHashCode();
    if (StunDuration != 0) hash ^= StunDuration.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unitIds_.WriteTo(output, _repeated_unitIds_codec);
    if (StunDuration != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(StunDuration);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unitIds_.CalculateSize(_repeated_unitIds_codec);
    if (StunDuration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StunDuration);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(S2CEnemyStunSpellNotification other) {
    if (other == null) {
      return;
    }
    unitIds_.Add(other.unitIds_);
    if (other.StunDuration != 0) {
      StunDuration = other.StunDuration;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
          break;
        }
        case 16: {
          StunDuration = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///
///최상위 GamePacket 메시지
/// </summary>
public sealed partial class GamePacket : pb::IMessage<GamePacket> {
  private static readonly pb::MessageParser<GamePacket> _parser = new pb::MessageParser<GamePacket>(() => new GamePacket());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GamePacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtoReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket(GamePacket other) : this() {
    switch (other.PayloadCase) {
      case PayloadOneofCase.ErrorNotification:
        ErrorNotification = other.ErrorNotification.Clone();
        break;
      case PayloadOneofCase.AuthRequest:
        AuthRequest = other.AuthRequest.Clone();
        break;
      case PayloadOneofCase.AuthResponse:
        AuthResponse = other.AuthResponse.Clone();
        break;
      case PayloadOneofCase.MatchRequest:
        MatchRequest = other.MatchRequest.Clone();
        break;
      case PayloadOneofCase.MatchNotification:
        MatchNotification = other.MatchNotification.Clone();
        break;
      case PayloadOneofCase.MatchCancelRequest:
        MatchCancelRequest = other.MatchCancelRequest.Clone();
        break;
      case PayloadOneofCase.GameStartRequest:
        GameStartRequest = other.GameStartRequest.Clone();
        break;
      case PayloadOneofCase.GameStartNotification:
        GameStartNotification = other.GameStartNotification.Clone();
        break;
      case PayloadOneofCase.PurchaseBuildingRequest:
        PurchaseBuildingRequest = other.PurchaseBuildingRequest.Clone();
        break;
      case PayloadOneofCase.PurchaseBuildingResponse:
        PurchaseBuildingResponse = other.PurchaseBuildingResponse.Clone();
        break;
      case PayloadOneofCase.AddEnemyBuildingNotification:
        AddEnemyBuildingNotification = other.AddEnemyBuildingNotification.Clone();
        break;
      case PayloadOneofCase.SpawnUnitRequest:
        SpawnUnitRequest = other.SpawnUnitRequest.Clone();
        break;
      case PayloadOneofCase.SpawnUnitResponse:
        SpawnUnitResponse = other.SpawnUnitResponse.Clone();
        break;
      case PayloadOneofCase.SpawnEnemyUnitNotification:
        SpawnEnemyUnitNotification = other.SpawnEnemyUnitNotification.Clone();
        break;
      case PayloadOneofCase.AttackUnitRequest:
        AttackUnitRequest = other.AttackUnitRequest.Clone();
        break;
      case PayloadOneofCase.AttackUnitNotification:
        AttackUnitNotification = other.AttackUnitNotification.Clone();
        break;
      case PayloadOneofCase.DamageUnitRequest:
        DamageUnitRequest = other.DamageUnitRequest.Clone();
        break;
      case PayloadOneofCase.DamageUnitNotification:
        DamageUnitNotification = other.DamageUnitNotification.Clone();
        break;
      case PayloadOneofCase.UnitDeathNotification:
        UnitDeathNotification = other.UnitDeathNotification.Clone();
        break;
      case PayloadOneofCase.EnterCheckpointNotification:
        EnterCheckpointNotification = other.EnterCheckpointNotification.Clone();
        break;
      case PayloadOneofCase.ExitCheckpointNotification:
        ExitCheckpointNotification = other.ExitCheckpointNotification.Clone();
        break;
      case PayloadOneofCase.TryOccupationNotification:
        TryOccupationNotification = other.TryOccupationNotification.Clone();
        break;
      case PayloadOneofCase.PauseOccupationNotification:
        PauseOccupationNotification = other.PauseOccupationNotification.Clone();
        break;
      case PayloadOneofCase.OccupationTimerResetNotification:
        OccupationTimerResetNotification = other.OccupationTimerResetNotification.Clone();
        break;
      case PayloadOneofCase.OccupationSuccessNotification:
        OccupationSuccessNotification = other.OccupationSuccessNotification.Clone();
        break;
      case PayloadOneofCase.AttackBaseRequest:
        AttackBaseRequest = other.AttackBaseRequest.Clone();
        break;
      case PayloadOneofCase.AttackBaseResponse:
        AttackBaseResponse = other.AttackBaseResponse.Clone();
        break;
      case PayloadOneofCase.EnemyAttackBaseNotification:
        EnemyAttackBaseNotification = other.EnemyAttackBaseNotification.Clone();
        break;
      case PayloadOneofCase.DamageBaseRequest:
        DamageBaseRequest = other.DamageBaseRequest.Clone();
        break;
      case PayloadOneofCase.DamageBaseResponse:
        DamageBaseResponse = other.DamageBaseResponse.Clone();
        break;
      case PayloadOneofCase.EnemyDamageBaseNotification:
        EnemyDamageBaseNotification = other.EnemyDamageBaseNotification.Clone();
        break;
      case PayloadOneofCase.GameOverNotification:
        GameOverNotification = other.GameOverNotification.Clone();
        break;
      case PayloadOneofCase.GameEndNotification:
        GameEndNotification = other.GameEndNotification.Clone();
        break;
      case PayloadOneofCase.LocationNotification:
        LocationNotification = other.LocationNotification.Clone();
        break;
      case PayloadOneofCase.LocationSyncNotification:
        LocationSyncNotification = other.LocationSyncNotification.Clone();
        break;
      case PayloadOneofCase.MineralSyncNotification:
        MineralSyncNotification = other.MineralSyncNotification.Clone();
        break;
      case PayloadOneofCase.HealUnitRequest:
        HealUnitRequest = other.HealUnitRequest.Clone();
        break;
      case PayloadOneofCase.HealUnitNotification:
        HealUnitNotification = other.HealUnitNotification.Clone();
        break;
      case PayloadOneofCase.BuffUnitRequest:
        BuffUnitRequest = other.BuffUnitRequest.Clone();
        break;
      case PayloadOneofCase.BuffUnitNotification:
        BuffUnitNotification = other.BuffUnitNotification.Clone();
        break;
      case PayloadOneofCase.UnitAnimationNotification:
        UnitAnimationNotification = other.UnitAnimationNotification.Clone();
        break;
      case PayloadOneofCase.EnemyUnitAnimationNotification:
        EnemyUnitAnimationNotification = other.EnemyUnitAnimationNotification.Clone();
        break;
      case PayloadOneofCase.DrawCardRequest:
        DrawCardRequest = other.DrawCardRequest.Clone();
        break;
      case PayloadOneofCase.DrawCardResponse:
        DrawCardResponse = other.DrawCardResponse.Clone();
        break;
      case PayloadOneofCase.EliteCardNotification:
        EliteCardNotification = other.EliteCardNotification.Clone();
        break;
      case PayloadOneofCase.AttackSpellRequest:
        AttackSpellRequest = other.AttackSpellRequest.Clone();
        break;
      case PayloadOneofCase.AttackSpellResponse:
        AttackSpellResponse = other.AttackSpellResponse.Clone();
        break;
      case PayloadOneofCase.EnemyAttackSpellNotification:
        EnemyAttackSpellNotification = other.EnemyAttackSpellNotification.Clone();
        break;
      case PayloadOneofCase.HealSpellRequest:
        HealSpellRequest = other.HealSpellRequest.Clone();
        break;
      case PayloadOneofCase.HealSpellResponse:
        HealSpellResponse = other.HealSpellResponse.Clone();
        break;
      case PayloadOneofCase.EnemyHealSpellNotification:
        EnemyHealSpellNotification = other.EnemyHealSpellNotification.Clone();
        break;
      case PayloadOneofCase.BuffSpellRequest:
        BuffSpellRequest = other.BuffSpellRequest.Clone();
        break;
      case PayloadOneofCase.BuffSpellResponse:
        BuffSpellResponse = other.BuffSpellResponse.Clone();
        break;
      case PayloadOneofCase.EnemyBuffSpellNotification:
        EnemyBuffSpellNotification = other.EnemyBuffSpellNotification.Clone();
        break;
      case PayloadOneofCase.StunSpellRequest:
        StunSpellRequest = other.StunSpellRequest.Clone();
        break;
      case PayloadOneofCase.StunSpellResponse:
        StunSpellResponse = other.StunSpellResponse.Clone();
        break;
      case PayloadOneofCase.EnemyStunSpellNotification:
        EnemyStunSpellNotification = other.EnemyStunSpellNotification.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePacket Clone() {
    return new GamePacket(this);
  }

  /// <summary>Field number for the "errorNotification" field.</summary>
  public const int ErrorNotificationFieldNumber = 1;
  /// <summary>
  /// 에러
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CErrorNotification ErrorNotification {
    get { return payloadCase_ == PayloadOneofCase.ErrorNotification ? (global::S2CErrorNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ErrorNotification;
    }
  }

  /// <summary>Field number for the "authRequest" field.</summary>
  public const int AuthRequestFieldNumber = 2;
  /// <summary>
  /// 인증
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SAuthRequest AuthRequest {
    get { return payloadCase_ == PayloadOneofCase.AuthRequest ? (global::C2SAuthRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AuthRequest;
    }
  }

  /// <summary>Field number for the "authResponse" field.</summary>
  public const int AuthResponseFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CAuthResponse AuthResponse {
    get { return payloadCase_ == PayloadOneofCase.AuthResponse ? (global::S2CAuthResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AuthResponse;
    }
  }

  /// <summary>Field number for the "matchRequest" field.</summary>
  public const int MatchRequestFieldNumber = 30;
  /// <summary>
  /// 매칭
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SMatchRequest MatchRequest {
    get { return payloadCase_ == PayloadOneofCase.MatchRequest ? (global::C2SMatchRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchRequest;
    }
  }

  /// <summary>Field number for the "matchNotification" field.</summary>
  public const int MatchNotificationFieldNumber = 31;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CMatchNotification MatchNotification {
    get { return payloadCase_ == PayloadOneofCase.MatchNotification ? (global::S2CMatchNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchNotification;
    }
  }

  /// <summary>Field number for the "matchCancelRequest" field.</summary>
  public const int MatchCancelRequestFieldNumber = 32;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SMatchCancelRequest MatchCancelRequest {
    get { return payloadCase_ == PayloadOneofCase.MatchCancelRequest ? (global::C2SMatchCancelRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchCancelRequest;
    }
  }

  /// <summary>Field number for the "gameStartRequest" field.</summary>
  public const int GameStartRequestFieldNumber = 80;
  /// <summary>
  /// 게임 시작
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SGameStartRequest GameStartRequest {
    get { return payloadCase_ == PayloadOneofCase.GameStartRequest ? (global::C2SGameStartRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameStartRequest;
    }
  }

  /// <summary>Field number for the "gameStartNotification" field.</summary>
  public const int GameStartNotificationFieldNumber = 81;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CGameStartNotification GameStartNotification {
    get { return payloadCase_ == PayloadOneofCase.GameStartNotification ? (global::S2CGameStartNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameStartNotification;
    }
  }

  /// <summary>Field number for the "purchaseBuildingRequest" field.</summary>
  public const int PurchaseBuildingRequestFieldNumber = 90;
  /// <summary>
  /// 건물 구매
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SPurchaseBuildingRequest PurchaseBuildingRequest {
    get { return payloadCase_ == PayloadOneofCase.PurchaseBuildingRequest ? (global::C2SPurchaseBuildingRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseBuildingRequest;
    }
  }

  /// <summary>Field number for the "purchaseBuildingResponse" field.</summary>
  public const int PurchaseBuildingResponseFieldNumber = 91;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CPurchaseBuildingResponse PurchaseBuildingResponse {
    get { return payloadCase_ == PayloadOneofCase.PurchaseBuildingResponse ? (global::S2CPurchaseBuildingResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseBuildingResponse;
    }
  }

  /// <summary>Field number for the "addEnemyBuildingNotification" field.</summary>
  public const int AddEnemyBuildingNotificationFieldNumber = 92;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CAddEnemyBuildingNotification AddEnemyBuildingNotification {
    get { return payloadCase_ == PayloadOneofCase.AddEnemyBuildingNotification ? (global::S2CAddEnemyBuildingNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AddEnemyBuildingNotification;
    }
  }

  /// <summary>Field number for the "spawnUnitRequest" field.</summary>
  public const int SpawnUnitRequestFieldNumber = 100;
  /// <summary>
  /// 유닛 생성
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SSpawnUnitRequest SpawnUnitRequest {
    get { return payloadCase_ == PayloadOneofCase.SpawnUnitRequest ? (global::C2SSpawnUnitRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpawnUnitRequest;
    }
  }

  /// <summary>Field number for the "spawnUnitResponse" field.</summary>
  public const int SpawnUnitResponseFieldNumber = 101;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CSpawnUnitResponse SpawnUnitResponse {
    get { return payloadCase_ == PayloadOneofCase.SpawnUnitResponse ? (global::S2CSpawnUnitResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpawnUnitResponse;
    }
  }

  /// <summary>Field number for the "spawnEnemyUnitNotification" field.</summary>
  public const int SpawnEnemyUnitNotificationFieldNumber = 102;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CSpawnEnemyUnitNotification SpawnEnemyUnitNotification {
    get { return payloadCase_ == PayloadOneofCase.SpawnEnemyUnitNotification ? (global::S2CSpawnEnemyUnitNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpawnEnemyUnitNotification;
    }
  }

  /// <summary>Field number for the "attackUnitRequest" field.</summary>
  public const int AttackUnitRequestFieldNumber = 200;
  /// <summary>
  /// 유닛 공격
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SAttackUnitRequest AttackUnitRequest {
    get { return payloadCase_ == PayloadOneofCase.AttackUnitRequest ? (global::C2SAttackUnitRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AttackUnitRequest;
    }
  }

  /// <summary>Field number for the "attackUnitNotification" field.</summary>
  public const int AttackUnitNotificationFieldNumber = 201;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CAttackUnitNotification AttackUnitNotification {
    get { return payloadCase_ == PayloadOneofCase.AttackUnitNotification ? (global::S2CAttackUnitNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AttackUnitNotification;
    }
  }

  /// <summary>Field number for the "damageUnitRequest" field.</summary>
  public const int DamageUnitRequestFieldNumber = 300;
  /// <summary>
  /// 유닛 피격
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SDamageUnitRequest DamageUnitRequest {
    get { return payloadCase_ == PayloadOneofCase.DamageUnitRequest ? (global::C2SDamageUnitRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DamageUnitRequest;
    }
  }

  /// <summary>Field number for the "damageUnitNotification" field.</summary>
  public const int DamageUnitNotificationFieldNumber = 301;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CDamageUnitNotification DamageUnitNotification {
    get { return payloadCase_ == PayloadOneofCase.DamageUnitNotification ? (global::S2CDamageUnitNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DamageUnitNotification;
    }
  }

  /// <summary>Field number for the "unitDeathNotification" field.</summary>
  public const int UnitDeathNotificationFieldNumber = 400;
  /// <summary>
  /// 유닛 사망
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CUnitDeathNotification UnitDeathNotification {
    get { return payloadCase_ == PayloadOneofCase.UnitDeathNotification ? (global::S2CUnitDeathNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UnitDeathNotification;
    }
  }

  /// <summary>Field number for the "enterCheckpointNotification" field.</summary>
  public const int EnterCheckpointNotificationFieldNumber = 500;
  /// <summary>
  /// 체크포인트 점령
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SEnterCheckpointNotification EnterCheckpointNotification {
    get { return payloadCase_ == PayloadOneofCase.EnterCheckpointNotification ? (global::C2SEnterCheckpointNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnterCheckpointNotification;
    }
  }

  /// <summary>Field number for the "exitCheckpointNotification" field.</summary>
  public const int ExitCheckpointNotificationFieldNumber = 501;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SExitCheckpointNotification ExitCheckpointNotification {
    get { return payloadCase_ == PayloadOneofCase.ExitCheckpointNotification ? (global::C2SExitCheckpointNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ExitCheckpointNotification;
    }
  }

  /// <summary>Field number for the "tryOccupationNotification" field.</summary>
  public const int TryOccupationNotificationFieldNumber = 502;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CTryOccupationNotification TryOccupationNotification {
    get { return payloadCase_ == PayloadOneofCase.TryOccupationNotification ? (global::S2CTryOccupationNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TryOccupationNotification;
    }
  }

  /// <summary>Field number for the "pauseOccupationNotification" field.</summary>
  public const int PauseOccupationNotificationFieldNumber = 503;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CPauseOccupationNotification PauseOccupationNotification {
    get { return payloadCase_ == PayloadOneofCase.PauseOccupationNotification ? (global::S2CPauseOccupationNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PauseOccupationNotification;
    }
  }

  /// <summary>Field number for the "occupationTimerResetNotification" field.</summary>
  public const int OccupationTimerResetNotificationFieldNumber = 504;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2COccupationTimerResetNotification OccupationTimerResetNotification {
    get { return payloadCase_ == PayloadOneofCase.OccupationTimerResetNotification ? (global::S2COccupationTimerResetNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.OccupationTimerResetNotification;
    }
  }

  /// <summary>Field number for the "occupationSuccessNotification" field.</summary>
  public const int OccupationSuccessNotificationFieldNumber = 505;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2COccupationSuccessNotification OccupationSuccessNotification {
    get { return payloadCase_ == PayloadOneofCase.OccupationSuccessNotification ? (global::S2COccupationSuccessNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.OccupationSuccessNotification;
    }
  }

  /// <summary>Field number for the "attackBaseRequest" field.</summary>
  public const int AttackBaseRequestFieldNumber = 600;
  /// <summary>
  /// 성채 공격 검증
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SAttackBaseRequest AttackBaseRequest {
    get { return payloadCase_ == PayloadOneofCase.AttackBaseRequest ? (global::C2SAttackBaseRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AttackBaseRequest;
    }
  }

  /// <summary>Field number for the "attackBaseResponse" field.</summary>
  public const int AttackBaseResponseFieldNumber = 601;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CAttackBaseResponse AttackBaseResponse {
    get { return payloadCase_ == PayloadOneofCase.AttackBaseResponse ? (global::S2CAttackBaseResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AttackBaseResponse;
    }
  }

  /// <summary>Field number for the "enemyAttackBaseNotification" field.</summary>
  public const int EnemyAttackBaseNotificationFieldNumber = 602;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyAttackBaseNotification EnemyAttackBaseNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyAttackBaseNotification ? (global::S2CEnemyAttackBaseNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyAttackBaseNotification;
    }
  }

  /// <summary>Field number for the "damageBaseRequest" field.</summary>
  public const int DamageBaseRequestFieldNumber = 603;
  /// <summary>
  /// 성채 공격
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SDamageBaseRequest DamageBaseRequest {
    get { return payloadCase_ == PayloadOneofCase.DamageBaseRequest ? (global::C2SDamageBaseRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DamageBaseRequest;
    }
  }

  /// <summary>Field number for the "damageBaseResponse" field.</summary>
  public const int DamageBaseResponseFieldNumber = 604;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CDamageBaseResponse DamageBaseResponse {
    get { return payloadCase_ == PayloadOneofCase.DamageBaseResponse ? (global::S2CDamageBaseResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DamageBaseResponse;
    }
  }

  /// <summary>Field number for the "enemyDamageBaseNotification" field.</summary>
  public const int EnemyDamageBaseNotificationFieldNumber = 605;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyDamageBaseNotification EnemyDamageBaseNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyDamageBaseNotification ? (global::S2CEnemyDamageBaseNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyDamageBaseNotification;
    }
  }

  /// <summary>Field number for the "gameOverNotification" field.</summary>
  public const int GameOverNotificationFieldNumber = 700;
  /// <summary>
  /// 게임 종료
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CGameOverNotification GameOverNotification {
    get { return payloadCase_ == PayloadOneofCase.GameOverNotification ? (global::S2CGameOverNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameOverNotification;
    }
  }

  /// <summary>Field number for the "gameEndNotification" field.</summary>
  public const int GameEndNotificationFieldNumber = 701;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SGameEndNotification GameEndNotification {
    get { return payloadCase_ == PayloadOneofCase.GameEndNotification ? (global::C2SGameEndNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameEndNotification;
    }
  }

  /// <summary>Field number for the "locationNotification" field.</summary>
  public const int LocationNotificationFieldNumber = 800;
  /// <summary>
  /// 위치 동기화
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SLocationNotification LocationNotification {
    get { return payloadCase_ == PayloadOneofCase.LocationNotification ? (global::C2SLocationNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LocationNotification;
    }
  }

  /// <summary>Field number for the "locationSyncNotification" field.</summary>
  public const int LocationSyncNotificationFieldNumber = 801;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CLocationSyncNotification LocationSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.LocationSyncNotification ? (global::S2CLocationSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LocationSyncNotification;
    }
  }

  /// <summary>Field number for the "mineralSyncNotification" field.</summary>
  public const int MineralSyncNotificationFieldNumber = 900;
  /// <summary>
  /// 미네랄 동기화
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CMineralSyncNotification MineralSyncNotification {
    get { return payloadCase_ == PayloadOneofCase.MineralSyncNotification ? (global::S2CMineralSyncNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MineralSyncNotification;
    }
  }

  /// <summary>Field number for the "healUnitRequest" field.</summary>
  public const int HealUnitRequestFieldNumber = 1000;
  /// <summary>
  /// Heal 관련
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SHealUnitRequest HealUnitRequest {
    get { return payloadCase_ == PayloadOneofCase.HealUnitRequest ? (global::C2SHealUnitRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.HealUnitRequest;
    }
  }

  /// <summary>Field number for the "HealUnitNotification" field.</summary>
  public const int HealUnitNotificationFieldNumber = 1001;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CHealUnitNotification HealUnitNotification {
    get { return payloadCase_ == PayloadOneofCase.HealUnitNotification ? (global::S2CHealUnitNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.HealUnitNotification;
    }
  }

  /// <summary>Field number for the "buffUnitRequest" field.</summary>
  public const int BuffUnitRequestFieldNumber = 1100;
  /// <summary>
  /// Buff 관련
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SBuffUnitRequest BuffUnitRequest {
    get { return payloadCase_ == PayloadOneofCase.BuffUnitRequest ? (global::C2SBuffUnitRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BuffUnitRequest;
    }
  }

  /// <summary>Field number for the "BuffUnitNotification" field.</summary>
  public const int BuffUnitNotificationFieldNumber = 1101;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CBuffUnitNotification BuffUnitNotification {
    get { return payloadCase_ == PayloadOneofCase.BuffUnitNotification ? (global::S2CBuffUnitNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BuffUnitNotification;
    }
  }

  /// <summary>Field number for the "unitAnimationNotification" field.</summary>
  public const int UnitAnimationNotificationFieldNumber = 1200;
  /// <summary>
  /// 애니메이션 관련
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SUnitAnimationNotification UnitAnimationNotification {
    get { return payloadCase_ == PayloadOneofCase.UnitAnimationNotification ? (global::C2SUnitAnimationNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UnitAnimationNotification;
    }
  }

  /// <summary>Field number for the "enemyUnitAnimationNotification" field.</summary>
  public const int EnemyUnitAnimationNotificationFieldNumber = 1201;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyUnitAnimationNotification EnemyUnitAnimationNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyUnitAnimationNotification ? (global::S2CEnemyUnitAnimationNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyUnitAnimationNotification;
    }
  }

  /// <summary>Field number for the "drawCardRequest" field.</summary>
  public const int DrawCardRequestFieldNumber = 1300;
  /// <summary>
  /// 카드 관련
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SDrawCardRequest DrawCardRequest {
    get { return payloadCase_ == PayloadOneofCase.DrawCardRequest ? (global::C2SDrawCardRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DrawCardRequest;
    }
  }

  /// <summary>Field number for the "drawCardResponse" field.</summary>
  public const int DrawCardResponseFieldNumber = 1301;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CDrawCardResponse DrawCardResponse {
    get { return payloadCase_ == PayloadOneofCase.DrawCardResponse ? (global::S2CDrawCardResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DrawCardResponse;
    }
  }

  /// <summary>Field number for the "eliteCardNotification" field.</summary>
  public const int EliteCardNotificationFieldNumber = 1302;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEliteCardNotification EliteCardNotification {
    get { return payloadCase_ == PayloadOneofCase.EliteCardNotification ? (global::S2CEliteCardNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EliteCardNotification;
    }
  }

  /// <summary>Field number for the "attackSpellRequest" field.</summary>
  public const int AttackSpellRequestFieldNumber = 1400;
  /// <summary>
  /// 공격 스펠
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SAttackSpellRequest AttackSpellRequest {
    get { return payloadCase_ == PayloadOneofCase.AttackSpellRequest ? (global::C2SAttackSpellRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AttackSpellRequest;
    }
  }

  /// <summary>Field number for the "attackSpellResponse" field.</summary>
  public const int AttackSpellResponseFieldNumber = 1401;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CAttackSpellResponse AttackSpellResponse {
    get { return payloadCase_ == PayloadOneofCase.AttackSpellResponse ? (global::S2CAttackSpellResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AttackSpellResponse;
    }
  }

  /// <summary>Field number for the "enemyAttackSpellNotification" field.</summary>
  public const int EnemyAttackSpellNotificationFieldNumber = 1402;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyAttackSpellNotification EnemyAttackSpellNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyAttackSpellNotification ? (global::S2CEnemyAttackSpellNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyAttackSpellNotification;
    }
  }

  /// <summary>Field number for the "healSpellRequest" field.</summary>
  public const int HealSpellRequestFieldNumber = 1403;
  /// <summary>
  /// 힐 스펠
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SHealSpellRequest HealSpellRequest {
    get { return payloadCase_ == PayloadOneofCase.HealSpellRequest ? (global::C2SHealSpellRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.HealSpellRequest;
    }
  }

  /// <summary>Field number for the "healSpellResponse" field.</summary>
  public const int HealSpellResponseFieldNumber = 1404;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CHealSpellResponse HealSpellResponse {
    get { return payloadCase_ == PayloadOneofCase.HealSpellResponse ? (global::S2CHealSpellResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.HealSpellResponse;
    }
  }

  /// <summary>Field number for the "enemyHealSpellNotification" field.</summary>
  public const int EnemyHealSpellNotificationFieldNumber = 1405;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyHealSpellNotification EnemyHealSpellNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyHealSpellNotification ? (global::S2CEnemyHealSpellNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyHealSpellNotification;
    }
  }

  /// <summary>Field number for the "buffSpellRequest" field.</summary>
  public const int BuffSpellRequestFieldNumber = 1406;
  /// <summary>
  /// 버프 스펠
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SBuffSpellRequest BuffSpellRequest {
    get { return payloadCase_ == PayloadOneofCase.BuffSpellRequest ? (global::C2SBuffSpellRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BuffSpellRequest;
    }
  }

  /// <summary>Field number for the "buffSpellResponse" field.</summary>
  public const int BuffSpellResponseFieldNumber = 1407;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CBuffSpellResponse BuffSpellResponse {
    get { return payloadCase_ == PayloadOneofCase.BuffSpellResponse ? (global::S2CBuffSpellResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BuffSpellResponse;
    }
  }

  /// <summary>Field number for the "enemyBuffSpellNotification" field.</summary>
  public const int EnemyBuffSpellNotificationFieldNumber = 1408;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyBuffSpellNotification EnemyBuffSpellNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyBuffSpellNotification ? (global::S2CEnemyBuffSpellNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyBuffSpellNotification;
    }
  }

  /// <summary>Field number for the "stunSpellRequest" field.</summary>
  public const int StunSpellRequestFieldNumber = 1409;
  /// <summary>
  /// 스턴 스펠
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::C2SStunSpellRequest StunSpellRequest {
    get { return payloadCase_ == PayloadOneofCase.StunSpellRequest ? (global::C2SStunSpellRequest) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StunSpellRequest;
    }
  }

  /// <summary>Field number for the "stunSpellResponse" field.</summary>
  public const int StunSpellResponseFieldNumber = 1410;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CStunSpellResponse StunSpellResponse {
    get { return payloadCase_ == PayloadOneofCase.StunSpellResponse ? (global::S2CStunSpellResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StunSpellResponse;
    }
  }

  /// <summary>Field number for the "enemyStunSpellNotification" field.</summary>
  public const int EnemyStunSpellNotificationFieldNumber = 1411;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::S2CEnemyStunSpellNotification EnemyStunSpellNotification {
    get { return payloadCase_ == PayloadOneofCase.EnemyStunSpellNotification ? (global::S2CEnemyStunSpellNotification) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.EnemyStunSpellNotification;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    ErrorNotification = 1,
    AuthRequest = 2,
    AuthResponse = 3,
    MatchRequest = 30,
    MatchNotification = 31,
    MatchCancelRequest = 32,
    GameStartRequest = 80,
    GameStartNotification = 81,
    PurchaseBuildingRequest = 90,
    PurchaseBuildingResponse = 91,
    AddEnemyBuildingNotification = 92,
    SpawnUnitRequest = 100,
    SpawnUnitResponse = 101,
    SpawnEnemyUnitNotification = 102,
    AttackUnitRequest = 200,
    AttackUnitNotification = 201,
    DamageUnitRequest = 300,
    DamageUnitNotification = 301,
    UnitDeathNotification = 400,
    EnterCheckpointNotification = 500,
    ExitCheckpointNotification = 501,
    TryOccupationNotification = 502,
    PauseOccupationNotification = 503,
    OccupationTimerResetNotification = 504,
    OccupationSuccessNotification = 505,
    AttackBaseRequest = 600,
    AttackBaseResponse = 601,
    EnemyAttackBaseNotification = 602,
    DamageBaseRequest = 603,
    DamageBaseResponse = 604,
    EnemyDamageBaseNotification = 605,
    GameOverNotification = 700,
    GameEndNotification = 701,
    LocationNotification = 800,
    LocationSyncNotification = 801,
    MineralSyncNotification = 900,
    HealUnitRequest = 1000,
    HealUnitNotification = 1001,
    BuffUnitRequest = 1100,
    BuffUnitNotification = 1101,
    UnitAnimationNotification = 1200,
    EnemyUnitAnimationNotification = 1201,
    DrawCardRequest = 1300,
    DrawCardResponse = 1301,
    EliteCardNotification = 1302,
    AttackSpellRequest = 1400,
    AttackSpellResponse = 1401,
    EnemyAttackSpellNotification = 1402,
    HealSpellRequest = 1403,
    HealSpellResponse = 1404,
    EnemyHealSpellNotification = 1405,
    BuffSpellRequest = 1406,
    BuffSpellResponse = 1407,
    EnemyBuffSpellNotification = 1408,
    StunSpellRequest = 1409,
    StunSpellResponse = 1410,
    EnemyStunSpellNotification = 1411,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GamePacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GamePacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ErrorNotification, other.ErrorNotification)) return false;
    if (!object.Equals(AuthRequest, other.AuthRequest)) return false;
    if (!object.Equals(AuthResponse, other.AuthResponse)) return false;
    if (!object.Equals(MatchRequest, other.MatchRequest)) return false;
    if (!object.Equals(MatchNotification, other.MatchNotification)) return false;
    if (!object.Equals(MatchCancelRequest, other.MatchCancelRequest)) return false;
    if (!object.Equals(GameStartRequest, other.GameStartRequest)) return false;
    if (!object.Equals(GameStartNotification, other.GameStartNotification)) return false;
    if (!object.Equals(PurchaseBuildingRequest, other.PurchaseBuildingRequest)) return false;
    if (!object.Equals(PurchaseBuildingResponse, other.PurchaseBuildingResponse)) return false;
    if (!object.Equals(AddEnemyBuildingNotification, other.AddEnemyBuildingNotification)) return false;
    if (!object.Equals(SpawnUnitRequest, other.SpawnUnitRequest)) return false;
    if (!object.Equals(SpawnUnitResponse, other.SpawnUnitResponse)) return false;
    if (!object.Equals(SpawnEnemyUnitNotification, other.SpawnEnemyUnitNotification)) return false;
    if (!object.Equals(AttackUnitRequest, other.AttackUnitRequest)) return false;
    if (!object.Equals(AttackUnitNotification, other.AttackUnitNotification)) return false;
    if (!object.Equals(DamageUnitRequest, other.DamageUnitRequest)) return false;
    if (!object.Equals(DamageUnitNotification, other.DamageUnitNotification)) return false;
    if (!object.Equals(UnitDeathNotification, other.UnitDeathNotification)) return false;
    if (!object.Equals(EnterCheckpointNotification, other.EnterCheckpointNotification)) return false;
    if (!object.Equals(ExitCheckpointNotification, other.ExitCheckpointNotification)) return false;
    if (!object.Equals(TryOccupationNotification, other.TryOccupationNotification)) return false;
    if (!object.Equals(PauseOccupationNotification, other.PauseOccupationNotification)) return false;
    if (!object.Equals(OccupationTimerResetNotification, other.OccupationTimerResetNotification)) return false;
    if (!object.Equals(OccupationSuccessNotification, other.OccupationSuccessNotification)) return false;
    if (!object.Equals(AttackBaseRequest, other.AttackBaseRequest)) return false;
    if (!object.Equals(AttackBaseResponse, other.AttackBaseResponse)) return false;
    if (!object.Equals(EnemyAttackBaseNotification, other.EnemyAttackBaseNotification)) return false;
    if (!object.Equals(DamageBaseRequest, other.DamageBaseRequest)) return false;
    if (!object.Equals(DamageBaseResponse, other.DamageBaseResponse)) return false;
    if (!object.Equals(EnemyDamageBaseNotification, other.EnemyDamageBaseNotification)) return false;
    if (!object.Equals(GameOverNotification, other.GameOverNotification)) return false;
    if (!object.Equals(GameEndNotification, other.GameEndNotification)) return false;
    if (!object.Equals(LocationNotification, other.LocationNotification)) return false;
    if (!object.Equals(LocationSyncNotification, other.LocationSyncNotification)) return false;
    if (!object.Equals(MineralSyncNotification, other.MineralSyncNotification)) return false;
    if (!object.Equals(HealUnitRequest, other.HealUnitRequest)) return false;
    if (!object.Equals(HealUnitNotification, other.HealUnitNotification)) return false;
    if (!object.Equals(BuffUnitRequest, other.BuffUnitRequest)) return false;
    if (!object.Equals(BuffUnitNotification, other.BuffUnitNotification)) return false;
    if (!object.Equals(UnitAnimationNotification, other.UnitAnimationNotification)) return false;
    if (!object.Equals(EnemyUnitAnimationNotification, other.EnemyUnitAnimationNotification)) return false;
    if (!object.Equals(DrawCardRequest, other.DrawCardRequest)) return false;
    if (!object.Equals(DrawCardResponse, other.DrawCardResponse)) return false;
    if (!object.Equals(EliteCardNotification, other.EliteCardNotification)) return false;
    if (!object.Equals(AttackSpellRequest, other.AttackSpellRequest)) return false;
    if (!object.Equals(AttackSpellResponse, other.AttackSpellResponse)) return false;
    if (!object.Equals(EnemyAttackSpellNotification, other.EnemyAttackSpellNotification)) return false;
    if (!object.Equals(HealSpellRequest, other.HealSpellRequest)) return false;
    if (!object.Equals(HealSpellResponse, other.HealSpellResponse)) return false;
    if (!object.Equals(EnemyHealSpellNotification, other.EnemyHealSpellNotification)) return false;
    if (!object.Equals(BuffSpellRequest, other.BuffSpellRequest)) return false;
    if (!object.Equals(BuffSpellResponse, other.BuffSpellResponse)) return false;
    if (!object.Equals(EnemyBuffSpellNotification, other.EnemyBuffSpellNotification)) return false;
    if (!object.Equals(StunSpellRequest, other.StunSpellRequest)) return false;
    if (!object.Equals(StunSpellResponse, other.StunSpellResponse)) return false;
    if (!object.Equals(EnemyStunSpellNotification, other.EnemyStunSpellNotification)) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (payloadCase_ == PayloadOneofCase.ErrorNotification) hash ^= ErrorNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AuthRequest) hash ^= AuthRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AuthResponse) hash ^= AuthResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MatchRequest) hash ^= MatchRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MatchNotification) hash ^= MatchNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MatchCancelRequest) hash ^= MatchCancelRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameStartRequest) hash ^= GameStartRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameStartNotification) hash ^= GameStartNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseBuildingRequest) hash ^= PurchaseBuildingRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PurchaseBuildingResponse) hash ^= PurchaseBuildingResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AddEnemyBuildingNotification) hash ^= AddEnemyBuildingNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpawnUnitRequest) hash ^= SpawnUnitRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpawnUnitResponse) hash ^= SpawnUnitResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpawnEnemyUnitNotification) hash ^= SpawnEnemyUnitNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AttackUnitRequest) hash ^= AttackUnitRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AttackUnitNotification) hash ^= AttackUnitNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DamageUnitRequest) hash ^= DamageUnitRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DamageUnitNotification) hash ^= DamageUnitNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.UnitDeathNotification) hash ^= UnitDeathNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnterCheckpointNotification) hash ^= EnterCheckpointNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ExitCheckpointNotification) hash ^= ExitCheckpointNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.TryOccupationNotification) hash ^= TryOccupationNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.PauseOccupationNotification) hash ^= PauseOccupationNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.OccupationTimerResetNotification) hash ^= OccupationTimerResetNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.OccupationSuccessNotification) hash ^= OccupationSuccessNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AttackBaseRequest) hash ^= AttackBaseRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AttackBaseResponse) hash ^= AttackBaseResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyAttackBaseNotification) hash ^= EnemyAttackBaseNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DamageBaseRequest) hash ^= DamageBaseRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DamageBaseResponse) hash ^= DamageBaseResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyDamageBaseNotification) hash ^= EnemyDamageBaseNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameOverNotification) hash ^= GameOverNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.GameEndNotification) hash ^= GameEndNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LocationNotification) hash ^= LocationNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LocationSyncNotification) hash ^= LocationSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MineralSyncNotification) hash ^= MineralSyncNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.HealUnitRequest) hash ^= HealUnitRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.HealUnitNotification) hash ^= HealUnitNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BuffUnitRequest) hash ^= BuffUnitRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BuffUnitNotification) hash ^= BuffUnitNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.UnitAnimationNotification) hash ^= UnitAnimationNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyUnitAnimationNotification) hash ^= EnemyUnitAnimationNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DrawCardRequest) hash ^= DrawCardRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DrawCardResponse) hash ^= DrawCardResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EliteCardNotification) hash ^= EliteCardNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AttackSpellRequest) hash ^= AttackSpellRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AttackSpellResponse) hash ^= AttackSpellResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyAttackSpellNotification) hash ^= EnemyAttackSpellNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.HealSpellRequest) hash ^= HealSpellRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.HealSpellResponse) hash ^= HealSpellResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyHealSpellNotification) hash ^= EnemyHealSpellNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BuffSpellRequest) hash ^= BuffSpellRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BuffSpellResponse) hash ^= BuffSpellResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyBuffSpellNotification) hash ^= EnemyBuffSpellNotification.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.StunSpellRequest) hash ^= StunSpellRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.StunSpellResponse) hash ^= StunSpellResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.EnemyStunSpellNotification) hash ^= EnemyStunSpellNotification.GetHashCode();
    hash ^= (int) payloadCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (payloadCase_ == PayloadOneofCase.ErrorNotification) {
      output.WriteRawTag(10);
      output.WriteMessage(ErrorNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AuthRequest) {
      output.WriteRawTag(18);
      output.WriteMessage(AuthRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AuthResponse) {
      output.WriteRawTag(26);
      output.WriteMessage(AuthResponse);
    }
    if (payloadCase_ == PayloadOneofCase.MatchRequest) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(MatchRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MatchNotification) {
      output.WriteRawTag(250, 1);
      output.WriteMessage(MatchNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MatchCancelRequest) {
      output.WriteRawTag(130, 2);
      output.WriteMessage(MatchCancelRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartRequest) {
      output.WriteRawTag(130, 5);
      output.WriteMessage(GameStartRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartNotification) {
      output.WriteRawTag(138, 5);
      output.WriteMessage(GameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseBuildingRequest) {
      output.WriteRawTag(210, 5);
      output.WriteMessage(PurchaseBuildingRequest);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseBuildingResponse) {
      output.WriteRawTag(218, 5);
      output.WriteMessage(PurchaseBuildingResponse);
    }
    if (payloadCase_ == PayloadOneofCase.AddEnemyBuildingNotification) {
      output.WriteRawTag(226, 5);
      output.WriteMessage(AddEnemyBuildingNotification);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnUnitRequest) {
      output.WriteRawTag(162, 6);
      output.WriteMessage(SpawnUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnUnitResponse) {
      output.WriteRawTag(170, 6);
      output.WriteMessage(SpawnUnitResponse);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnEnemyUnitNotification) {
      output.WriteRawTag(178, 6);
      output.WriteMessage(SpawnEnemyUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AttackUnitRequest) {
      output.WriteRawTag(194, 12);
      output.WriteMessage(AttackUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AttackUnitNotification) {
      output.WriteRawTag(202, 12);
      output.WriteMessage(AttackUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DamageUnitRequest) {
      output.WriteRawTag(226, 18);
      output.WriteMessage(DamageUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DamageUnitNotification) {
      output.WriteRawTag(234, 18);
      output.WriteMessage(DamageUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.UnitDeathNotification) {
      output.WriteRawTag(130, 25);
      output.WriteMessage(UnitDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.EnterCheckpointNotification) {
      output.WriteRawTag(162, 31);
      output.WriteMessage(EnterCheckpointNotification);
    }
    if (payloadCase_ == PayloadOneofCase.ExitCheckpointNotification) {
      output.WriteRawTag(170, 31);
      output.WriteMessage(ExitCheckpointNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TryOccupationNotification) {
      output.WriteRawTag(178, 31);
      output.WriteMessage(TryOccupationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PauseOccupationNotification) {
      output.WriteRawTag(186, 31);
      output.WriteMessage(PauseOccupationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.OccupationTimerResetNotification) {
      output.WriteRawTag(194, 31);
      output.WriteMessage(OccupationTimerResetNotification);
    }
    if (payloadCase_ == PayloadOneofCase.OccupationSuccessNotification) {
      output.WriteRawTag(202, 31);
      output.WriteMessage(OccupationSuccessNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AttackBaseRequest) {
      output.WriteRawTag(194, 37);
      output.WriteMessage(AttackBaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AttackBaseResponse) {
      output.WriteRawTag(202, 37);
      output.WriteMessage(AttackBaseResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyAttackBaseNotification) {
      output.WriteRawTag(210, 37);
      output.WriteMessage(EnemyAttackBaseNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DamageBaseRequest) {
      output.WriteRawTag(218, 37);
      output.WriteMessage(DamageBaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DamageBaseResponse) {
      output.WriteRawTag(226, 37);
      output.WriteMessage(DamageBaseResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyDamageBaseNotification) {
      output.WriteRawTag(234, 37);
      output.WriteMessage(EnemyDamageBaseNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameOverNotification) {
      output.WriteRawTag(226, 43);
      output.WriteMessage(GameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameEndNotification) {
      output.WriteRawTag(234, 43);
      output.WriteMessage(GameEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LocationNotification) {
      output.WriteRawTag(130, 50);
      output.WriteMessage(LocationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LocationSyncNotification) {
      output.WriteRawTag(138, 50);
      output.WriteMessage(LocationSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MineralSyncNotification) {
      output.WriteRawTag(162, 56);
      output.WriteMessage(MineralSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.HealUnitRequest) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(HealUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.HealUnitNotification) {
      output.WriteRawTag(202, 62);
      output.WriteMessage(HealUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BuffUnitRequest) {
      output.WriteRawTag(226, 68);
      output.WriteMessage(BuffUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BuffUnitNotification) {
      output.WriteRawTag(234, 68);
      output.WriteMessage(BuffUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.UnitAnimationNotification) {
      output.WriteRawTag(130, 75);
      output.WriteMessage(UnitAnimationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyUnitAnimationNotification) {
      output.WriteRawTag(138, 75);
      output.WriteMessage(EnemyUnitAnimationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DrawCardRequest) {
      output.WriteRawTag(162, 81);
      output.WriteMessage(DrawCardRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DrawCardResponse) {
      output.WriteRawTag(170, 81);
      output.WriteMessage(DrawCardResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EliteCardNotification) {
      output.WriteRawTag(178, 81);
      output.WriteMessage(EliteCardNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AttackSpellRequest) {
      output.WriteRawTag(194, 87);
      output.WriteMessage(AttackSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AttackSpellResponse) {
      output.WriteRawTag(202, 87);
      output.WriteMessage(AttackSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyAttackSpellNotification) {
      output.WriteRawTag(210, 87);
      output.WriteMessage(EnemyAttackSpellNotification);
    }
    if (payloadCase_ == PayloadOneofCase.HealSpellRequest) {
      output.WriteRawTag(218, 87);
      output.WriteMessage(HealSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.HealSpellResponse) {
      output.WriteRawTag(226, 87);
      output.WriteMessage(HealSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyHealSpellNotification) {
      output.WriteRawTag(234, 87);
      output.WriteMessage(EnemyHealSpellNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BuffSpellRequest) {
      output.WriteRawTag(242, 87);
      output.WriteMessage(BuffSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BuffSpellResponse) {
      output.WriteRawTag(250, 87);
      output.WriteMessage(BuffSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyBuffSpellNotification) {
      output.WriteRawTag(130, 88);
      output.WriteMessage(EnemyBuffSpellNotification);
    }
    if (payloadCase_ == PayloadOneofCase.StunSpellRequest) {
      output.WriteRawTag(138, 88);
      output.WriteMessage(StunSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.StunSpellResponse) {
      output.WriteRawTag(146, 88);
      output.WriteMessage(StunSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyStunSpellNotification) {
      output.WriteRawTag(154, 88);
      output.WriteMessage(EnemyStunSpellNotification);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (payloadCase_ == PayloadOneofCase.ErrorNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AuthRequest) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AuthResponse) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthResponse);
    }
    if (payloadCase_ == PayloadOneofCase.MatchRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchRequest);
    }
    if (payloadCase_ == PayloadOneofCase.MatchNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MatchCancelRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchCancelRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStartRequest);
    }
    if (payloadCase_ == PayloadOneofCase.GameStartNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameStartNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseBuildingRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseBuildingRequest);
    }
    if (payloadCase_ == PayloadOneofCase.PurchaseBuildingResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseBuildingResponse);
    }
    if (payloadCase_ == PayloadOneofCase.AddEnemyBuildingNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddEnemyBuildingNotification);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnUnitRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpawnUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnUnitResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpawnUnitResponse);
    }
    if (payloadCase_ == PayloadOneofCase.SpawnEnemyUnitNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpawnEnemyUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AttackUnitRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AttackUnitNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DamageUnitRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DamageUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DamageUnitNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DamageUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.UnitDeathNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitDeathNotification);
    }
    if (payloadCase_ == PayloadOneofCase.EnterCheckpointNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnterCheckpointNotification);
    }
    if (payloadCase_ == PayloadOneofCase.ExitCheckpointNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExitCheckpointNotification);
    }
    if (payloadCase_ == PayloadOneofCase.TryOccupationNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(TryOccupationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.PauseOccupationNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseOccupationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.OccupationTimerResetNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(OccupationTimerResetNotification);
    }
    if (payloadCase_ == PayloadOneofCase.OccupationSuccessNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(OccupationSuccessNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AttackBaseRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackBaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AttackBaseResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackBaseResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyAttackBaseNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyAttackBaseNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DamageBaseRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DamageBaseRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DamageBaseResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DamageBaseResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyDamageBaseNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyDamageBaseNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameOverNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameOverNotification);
    }
    if (payloadCase_ == PayloadOneofCase.GameEndNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameEndNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LocationNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.LocationSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocationSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.MineralSyncNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MineralSyncNotification);
    }
    if (payloadCase_ == PayloadOneofCase.HealUnitRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HealUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.HealUnitNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HealUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BuffUnitRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffUnitRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BuffUnitNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffUnitNotification);
    }
    if (payloadCase_ == PayloadOneofCase.UnitAnimationNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitAnimationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyUnitAnimationNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyUnitAnimationNotification);
    }
    if (payloadCase_ == PayloadOneofCase.DrawCardRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DrawCardRequest);
    }
    if (payloadCase_ == PayloadOneofCase.DrawCardResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DrawCardResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EliteCardNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EliteCardNotification);
    }
    if (payloadCase_ == PayloadOneofCase.AttackSpellRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.AttackSpellResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyAttackSpellNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyAttackSpellNotification);
    }
    if (payloadCase_ == PayloadOneofCase.HealSpellRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HealSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.HealSpellResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HealSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyHealSpellNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyHealSpellNotification);
    }
    if (payloadCase_ == PayloadOneofCase.BuffSpellRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.BuffSpellResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyBuffSpellNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyBuffSpellNotification);
    }
    if (payloadCase_ == PayloadOneofCase.StunSpellRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StunSpellRequest);
    }
    if (payloadCase_ == PayloadOneofCase.StunSpellResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StunSpellResponse);
    }
    if (payloadCase_ == PayloadOneofCase.EnemyStunSpellNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnemyStunSpellNotification);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GamePacket other) {
    if (other == null) {
      return;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.ErrorNotification:
        if (ErrorNotification == null) {
          ErrorNotification = new global::S2CErrorNotification();
        }
        ErrorNotification.MergeFrom(other.ErrorNotification);
        break;
      case PayloadOneofCase.AuthRequest:
        if (AuthRequest == null) {
          AuthRequest = new global::C2SAuthRequest();
        }
        AuthRequest.MergeFrom(other.AuthRequest);
        break;
      case PayloadOneofCase.AuthResponse:
        if (AuthResponse == null) {
          AuthResponse = new global::S2CAuthResponse();
        }
        AuthResponse.MergeFrom(other.AuthResponse);
        break;
      case PayloadOneofCase.MatchRequest:
        if (MatchRequest == null) {
          MatchRequest = new global::C2SMatchRequest();
        }
        MatchRequest.MergeFrom(other.MatchRequest);
        break;
      case PayloadOneofCase.MatchNotification:
        if (MatchNotification == null) {
          MatchNotification = new global::S2CMatchNotification();
        }
        MatchNotification.MergeFrom(other.MatchNotification);
        break;
      case PayloadOneofCase.MatchCancelRequest:
        if (MatchCancelRequest == null) {
          MatchCancelRequest = new global::C2SMatchCancelRequest();
        }
        MatchCancelRequest.MergeFrom(other.MatchCancelRequest);
        break;
      case PayloadOneofCase.GameStartRequest:
        if (GameStartRequest == null) {
          GameStartRequest = new global::C2SGameStartRequest();
        }
        GameStartRequest.MergeFrom(other.GameStartRequest);
        break;
      case PayloadOneofCase.GameStartNotification:
        if (GameStartNotification == null) {
          GameStartNotification = new global::S2CGameStartNotification();
        }
        GameStartNotification.MergeFrom(other.GameStartNotification);
        break;
      case PayloadOneofCase.PurchaseBuildingRequest:
        if (PurchaseBuildingRequest == null) {
          PurchaseBuildingRequest = new global::C2SPurchaseBuildingRequest();
        }
        PurchaseBuildingRequest.MergeFrom(other.PurchaseBuildingRequest);
        break;
      case PayloadOneofCase.PurchaseBuildingResponse:
        if (PurchaseBuildingResponse == null) {
          PurchaseBuildingResponse = new global::S2CPurchaseBuildingResponse();
        }
        PurchaseBuildingResponse.MergeFrom(other.PurchaseBuildingResponse);
        break;
      case PayloadOneofCase.AddEnemyBuildingNotification:
        if (AddEnemyBuildingNotification == null) {
          AddEnemyBuildingNotification = new global::S2CAddEnemyBuildingNotification();
        }
        AddEnemyBuildingNotification.MergeFrom(other.AddEnemyBuildingNotification);
        break;
      case PayloadOneofCase.SpawnUnitRequest:
        if (SpawnUnitRequest == null) {
          SpawnUnitRequest = new global::C2SSpawnUnitRequest();
        }
        SpawnUnitRequest.MergeFrom(other.SpawnUnitRequest);
        break;
      case PayloadOneofCase.SpawnUnitResponse:
        if (SpawnUnitResponse == null) {
          SpawnUnitResponse = new global::S2CSpawnUnitResponse();
        }
        SpawnUnitResponse.MergeFrom(other.SpawnUnitResponse);
        break;
      case PayloadOneofCase.SpawnEnemyUnitNotification:
        if (SpawnEnemyUnitNotification == null) {
          SpawnEnemyUnitNotification = new global::S2CSpawnEnemyUnitNotification();
        }
        SpawnEnemyUnitNotification.MergeFrom(other.SpawnEnemyUnitNotification);
        break;
      case PayloadOneofCase.AttackUnitRequest:
        if (AttackUnitRequest == null) {
          AttackUnitRequest = new global::C2SAttackUnitRequest();
        }
        AttackUnitRequest.MergeFrom(other.AttackUnitRequest);
        break;
      case PayloadOneofCase.AttackUnitNotification:
        if (AttackUnitNotification == null) {
          AttackUnitNotification = new global::S2CAttackUnitNotification();
        }
        AttackUnitNotification.MergeFrom(other.AttackUnitNotification);
        break;
      case PayloadOneofCase.DamageUnitRequest:
        if (DamageUnitRequest == null) {
          DamageUnitRequest = new global::C2SDamageUnitRequest();
        }
        DamageUnitRequest.MergeFrom(other.DamageUnitRequest);
        break;
      case PayloadOneofCase.DamageUnitNotification:
        if (DamageUnitNotification == null) {
          DamageUnitNotification = new global::S2CDamageUnitNotification();
        }
        DamageUnitNotification.MergeFrom(other.DamageUnitNotification);
        break;
      case PayloadOneofCase.UnitDeathNotification:
        if (UnitDeathNotification == null) {
          UnitDeathNotification = new global::S2CUnitDeathNotification();
        }
        UnitDeathNotification.MergeFrom(other.UnitDeathNotification);
        break;
      case PayloadOneofCase.EnterCheckpointNotification:
        if (EnterCheckpointNotification == null) {
          EnterCheckpointNotification = new global::C2SEnterCheckpointNotification();
        }
        EnterCheckpointNotification.MergeFrom(other.EnterCheckpointNotification);
        break;
      case PayloadOneofCase.ExitCheckpointNotification:
        if (ExitCheckpointNotification == null) {
          ExitCheckpointNotification = new global::C2SExitCheckpointNotification();
        }
        ExitCheckpointNotification.MergeFrom(other.ExitCheckpointNotification);
        break;
      case PayloadOneofCase.TryOccupationNotification:
        if (TryOccupationNotification == null) {
          TryOccupationNotification = new global::S2CTryOccupationNotification();
        }
        TryOccupationNotification.MergeFrom(other.TryOccupationNotification);
        break;
      case PayloadOneofCase.PauseOccupationNotification:
        if (PauseOccupationNotification == null) {
          PauseOccupationNotification = new global::S2CPauseOccupationNotification();
        }
        PauseOccupationNotification.MergeFrom(other.PauseOccupationNotification);
        break;
      case PayloadOneofCase.OccupationTimerResetNotification:
        if (OccupationTimerResetNotification == null) {
          OccupationTimerResetNotification = new global::S2COccupationTimerResetNotification();
        }
        OccupationTimerResetNotification.MergeFrom(other.OccupationTimerResetNotification);
        break;
      case PayloadOneofCase.OccupationSuccessNotification:
        if (OccupationSuccessNotification == null) {
          OccupationSuccessNotification = new global::S2COccupationSuccessNotification();
        }
        OccupationSuccessNotification.MergeFrom(other.OccupationSuccessNotification);
        break;
      case PayloadOneofCase.AttackBaseRequest:
        if (AttackBaseRequest == null) {
          AttackBaseRequest = new global::C2SAttackBaseRequest();
        }
        AttackBaseRequest.MergeFrom(other.AttackBaseRequest);
        break;
      case PayloadOneofCase.AttackBaseResponse:
        if (AttackBaseResponse == null) {
          AttackBaseResponse = new global::S2CAttackBaseResponse();
        }
        AttackBaseResponse.MergeFrom(other.AttackBaseResponse);
        break;
      case PayloadOneofCase.EnemyAttackBaseNotification:
        if (EnemyAttackBaseNotification == null) {
          EnemyAttackBaseNotification = new global::S2CEnemyAttackBaseNotification();
        }
        EnemyAttackBaseNotification.MergeFrom(other.EnemyAttackBaseNotification);
        break;
      case PayloadOneofCase.DamageBaseRequest:
        if (DamageBaseRequest == null) {
          DamageBaseRequest = new global::C2SDamageBaseRequest();
        }
        DamageBaseRequest.MergeFrom(other.DamageBaseRequest);
        break;
      case PayloadOneofCase.DamageBaseResponse:
        if (DamageBaseResponse == null) {
          DamageBaseResponse = new global::S2CDamageBaseResponse();
        }
        DamageBaseResponse.MergeFrom(other.DamageBaseResponse);
        break;
      case PayloadOneofCase.EnemyDamageBaseNotification:
        if (EnemyDamageBaseNotification == null) {
          EnemyDamageBaseNotification = new global::S2CEnemyDamageBaseNotification();
        }
        EnemyDamageBaseNotification.MergeFrom(other.EnemyDamageBaseNotification);
        break;
      case PayloadOneofCase.GameOverNotification:
        if (GameOverNotification == null) {
          GameOverNotification = new global::S2CGameOverNotification();
        }
        GameOverNotification.MergeFrom(other.GameOverNotification);
        break;
      case PayloadOneofCase.GameEndNotification:
        if (GameEndNotification == null) {
          GameEndNotification = new global::C2SGameEndNotification();
        }
        GameEndNotification.MergeFrom(other.GameEndNotification);
        break;
      case PayloadOneofCase.LocationNotification:
        if (LocationNotification == null) {
          LocationNotification = new global::C2SLocationNotification();
        }
        LocationNotification.MergeFrom(other.LocationNotification);
        break;
      case PayloadOneofCase.LocationSyncNotification:
        if (LocationSyncNotification == null) {
          LocationSyncNotification = new global::S2CLocationSyncNotification();
        }
        LocationSyncNotification.MergeFrom(other.LocationSyncNotification);
        break;
      case PayloadOneofCase.MineralSyncNotification:
        if (MineralSyncNotification == null) {
          MineralSyncNotification = new global::S2CMineralSyncNotification();
        }
        MineralSyncNotification.MergeFrom(other.MineralSyncNotification);
        break;
      case PayloadOneofCase.HealUnitRequest:
        if (HealUnitRequest == null) {
          HealUnitRequest = new global::C2SHealUnitRequest();
        }
        HealUnitRequest.MergeFrom(other.HealUnitRequest);
        break;
      case PayloadOneofCase.HealUnitNotification:
        if (HealUnitNotification == null) {
          HealUnitNotification = new global::S2CHealUnitNotification();
        }
        HealUnitNotification.MergeFrom(other.HealUnitNotification);
        break;
      case PayloadOneofCase.BuffUnitRequest:
        if (BuffUnitRequest == null) {
          BuffUnitRequest = new global::C2SBuffUnitRequest();
        }
        BuffUnitRequest.MergeFrom(other.BuffUnitRequest);
        break;
      case PayloadOneofCase.BuffUnitNotification:
        if (BuffUnitNotification == null) {
          BuffUnitNotification = new global::S2CBuffUnitNotification();
        }
        BuffUnitNotification.MergeFrom(other.BuffUnitNotification);
        break;
      case PayloadOneofCase.UnitAnimationNotification:
        if (UnitAnimationNotification == null) {
          UnitAnimationNotification = new global::C2SUnitAnimationNotification();
        }
        UnitAnimationNotification.MergeFrom(other.UnitAnimationNotification);
        break;
      case PayloadOneofCase.EnemyUnitAnimationNotification:
        if (EnemyUnitAnimationNotification == null) {
          EnemyUnitAnimationNotification = new global::S2CEnemyUnitAnimationNotification();
        }
        EnemyUnitAnimationNotification.MergeFrom(other.EnemyUnitAnimationNotification);
        break;
      case PayloadOneofCase.DrawCardRequest:
        if (DrawCardRequest == null) {
          DrawCardRequest = new global::C2SDrawCardRequest();
        }
        DrawCardRequest.MergeFrom(other.DrawCardRequest);
        break;
      case PayloadOneofCase.DrawCardResponse:
        if (DrawCardResponse == null) {
          DrawCardResponse = new global::S2CDrawCardResponse();
        }
        DrawCardResponse.MergeFrom(other.DrawCardResponse);
        break;
      case PayloadOneofCase.EliteCardNotification:
        if (EliteCardNotification == null) {
          EliteCardNotification = new global::S2CEliteCardNotification();
        }
        EliteCardNotification.MergeFrom(other.EliteCardNotification);
        break;
      case PayloadOneofCase.AttackSpellRequest:
        if (AttackSpellRequest == null) {
          AttackSpellRequest = new global::C2SAttackSpellRequest();
        }
        AttackSpellRequest.MergeFrom(other.AttackSpellRequest);
        break;
      case PayloadOneofCase.AttackSpellResponse:
        if (AttackSpellResponse == null) {
          AttackSpellResponse = new global::S2CAttackSpellResponse();
        }
        AttackSpellResponse.MergeFrom(other.AttackSpellResponse);
        break;
      case PayloadOneofCase.EnemyAttackSpellNotification:
        if (EnemyAttackSpellNotification == null) {
          EnemyAttackSpellNotification = new global::S2CEnemyAttackSpellNotification();
        }
        EnemyAttackSpellNotification.MergeFrom(other.EnemyAttackSpellNotification);
        break;
      case PayloadOneofCase.HealSpellRequest:
        if (HealSpellRequest == null) {
          HealSpellRequest = new global::C2SHealSpellRequest();
        }
        HealSpellRequest.MergeFrom(other.HealSpellRequest);
        break;
      case PayloadOneofCase.HealSpellResponse:
        if (HealSpellResponse == null) {
          HealSpellResponse = new global::S2CHealSpellResponse();
        }
        HealSpellResponse.MergeFrom(other.HealSpellResponse);
        break;
      case PayloadOneofCase.EnemyHealSpellNotification:
        if (EnemyHealSpellNotification == null) {
          EnemyHealSpellNotification = new global::S2CEnemyHealSpellNotification();
        }
        EnemyHealSpellNotification.MergeFrom(other.EnemyHealSpellNotification);
        break;
      case PayloadOneofCase.BuffSpellRequest:
        if (BuffSpellRequest == null) {
          BuffSpellRequest = new global::C2SBuffSpellRequest();
        }
        BuffSpellRequest.MergeFrom(other.BuffSpellRequest);
        break;
      case PayloadOneofCase.BuffSpellResponse:
        if (BuffSpellResponse == null) {
          BuffSpellResponse = new global::S2CBuffSpellResponse();
        }
        BuffSpellResponse.MergeFrom(other.BuffSpellResponse);
        break;
      case PayloadOneofCase.EnemyBuffSpellNotification:
        if (EnemyBuffSpellNotification == null) {
          EnemyBuffSpellNotification = new global::S2CEnemyBuffSpellNotification();
        }
        EnemyBuffSpellNotification.MergeFrom(other.EnemyBuffSpellNotification);
        break;
      case PayloadOneofCase.StunSpellRequest:
        if (StunSpellRequest == null) {
          StunSpellRequest = new global::C2SStunSpellRequest();
        }
        StunSpellRequest.MergeFrom(other.StunSpellRequest);
        break;
      case PayloadOneofCase.StunSpellResponse:
        if (StunSpellResponse == null) {
          StunSpellResponse = new global::S2CStunSpellResponse();
        }
        StunSpellResponse.MergeFrom(other.StunSpellResponse);
        break;
      case PayloadOneofCase.EnemyStunSpellNotification:
        if (EnemyStunSpellNotification == null) {
          EnemyStunSpellNotification = new global::S2CEnemyStunSpellNotification();
        }
        EnemyStunSpellNotification.MergeFrom(other.EnemyStunSpellNotification);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::S2CErrorNotification subBuilder = new global::S2CErrorNotification();
          if (payloadCase_ == PayloadOneofCase.ErrorNotification) {
            subBuilder.MergeFrom(ErrorNotification);
          }
          input.ReadMessage(subBuilder);
          ErrorNotification = subBuilder;
          break;
        }
        case 18: {
          global::C2SAuthRequest subBuilder = new global::C2SAuthRequest();
          if (payloadCase_ == PayloadOneofCase.AuthRequest) {
            subBuilder.MergeFrom(AuthRequest);
          }
          input.ReadMessage(subBuilder);
          AuthRequest = subBuilder;
          break;
        }
        case 26: {
          global::S2CAuthResponse subBuilder = new global::S2CAuthResponse();
          if (payloadCase_ == PayloadOneofCase.AuthResponse) {
            subBuilder.MergeFrom(AuthResponse);
          }
          input.ReadMessage(subBuilder);
          AuthResponse = subBuilder;
          break;
        }
        case 242: {
          global::C2SMatchRequest subBuilder = new global::C2SMatchRequest();
          if (payloadCase_ == PayloadOneofCase.MatchRequest) {
            subBuilder.MergeFrom(MatchRequest);
          }
          input.ReadMessage(subBuilder);
          MatchRequest = subBuilder;
          break;
        }
        case 250: {
          global::S2CMatchNotification subBuilder = new global::S2CMatchNotification();
          if (payloadCase_ == PayloadOneofCase.MatchNotification) {
            subBuilder.MergeFrom(MatchNotification);
          }
          input.ReadMessage(subBuilder);
          MatchNotification = subBuilder;
          break;
        }
        case 258: {
          global::C2SMatchCancelRequest subBuilder = new global::C2SMatchCancelRequest();
          if (payloadCase_ == PayloadOneofCase.MatchCancelRequest) {
            subBuilder.MergeFrom(MatchCancelRequest);
          }
          input.ReadMessage(subBuilder);
          MatchCancelRequest = subBuilder;
          break;
        }
        case 642: {
          global::C2SGameStartRequest subBuilder = new global::C2SGameStartRequest();
          if (payloadCase_ == PayloadOneofCase.GameStartRequest) {
            subBuilder.MergeFrom(GameStartRequest);
          }
          input.ReadMessage(subBuilder);
          GameStartRequest = subBuilder;
          break;
        }
        case 650: {
          global::S2CGameStartNotification subBuilder = new global::S2CGameStartNotification();
          if (payloadCase_ == PayloadOneofCase.GameStartNotification) {
            subBuilder.MergeFrom(GameStartNotification);
          }
          input.ReadMessage(subBuilder);
          GameStartNotification = subBuilder;
          break;
        }
        case 722: {
          global::C2SPurchaseBuildingRequest subBuilder = new global::C2SPurchaseBuildingRequest();
          if (payloadCase_ == PayloadOneofCase.PurchaseBuildingRequest) {
            subBuilder.MergeFrom(PurchaseBuildingRequest);
          }
          input.ReadMessage(subBuilder);
          PurchaseBuildingRequest = subBuilder;
          break;
        }
        case 730: {
          global::S2CPurchaseBuildingResponse subBuilder = new global::S2CPurchaseBuildingResponse();
          if (payloadCase_ == PayloadOneofCase.PurchaseBuildingResponse) {
            subBuilder.MergeFrom(PurchaseBuildingResponse);
          }
          input.ReadMessage(subBuilder);
          PurchaseBuildingResponse = subBuilder;
          break;
        }
        case 738: {
          global::S2CAddEnemyBuildingNotification subBuilder = new global::S2CAddEnemyBuildingNotification();
          if (payloadCase_ == PayloadOneofCase.AddEnemyBuildingNotification) {
            subBuilder.MergeFrom(AddEnemyBuildingNotification);
          }
          input.ReadMessage(subBuilder);
          AddEnemyBuildingNotification = subBuilder;
          break;
        }
        case 802: {
          global::C2SSpawnUnitRequest subBuilder = new global::C2SSpawnUnitRequest();
          if (payloadCase_ == PayloadOneofCase.SpawnUnitRequest) {
            subBuilder.MergeFrom(SpawnUnitRequest);
          }
          input.ReadMessage(subBuilder);
          SpawnUnitRequest = subBuilder;
          break;
        }
        case 810: {
          global::S2CSpawnUnitResponse subBuilder = new global::S2CSpawnUnitResponse();
          if (payloadCase_ == PayloadOneofCase.SpawnUnitResponse) {
            subBuilder.MergeFrom(SpawnUnitResponse);
          }
          input.ReadMessage(subBuilder);
          SpawnUnitResponse = subBuilder;
          break;
        }
        case 818: {
          global::S2CSpawnEnemyUnitNotification subBuilder = new global::S2CSpawnEnemyUnitNotification();
          if (payloadCase_ == PayloadOneofCase.SpawnEnemyUnitNotification) {
            subBuilder.MergeFrom(SpawnEnemyUnitNotification);
          }
          input.ReadMessage(subBuilder);
          SpawnEnemyUnitNotification = subBuilder;
          break;
        }
        case 1602: {
          global::C2SAttackUnitRequest subBuilder = new global::C2SAttackUnitRequest();
          if (payloadCase_ == PayloadOneofCase.AttackUnitRequest) {
            subBuilder.MergeFrom(AttackUnitRequest);
          }
          input.ReadMessage(subBuilder);
          AttackUnitRequest = subBuilder;
          break;
        }
        case 1610: {
          global::S2CAttackUnitNotification subBuilder = new global::S2CAttackUnitNotification();
          if (payloadCase_ == PayloadOneofCase.AttackUnitNotification) {
            subBuilder.MergeFrom(AttackUnitNotification);
          }
          input.ReadMessage(subBuilder);
          AttackUnitNotification = subBuilder;
          break;
        }
        case 2402: {
          global::C2SDamageUnitRequest subBuilder = new global::C2SDamageUnitRequest();
          if (payloadCase_ == PayloadOneofCase.DamageUnitRequest) {
            subBuilder.MergeFrom(DamageUnitRequest);
          }
          input.ReadMessage(subBuilder);
          DamageUnitRequest = subBuilder;
          break;
        }
        case 2410: {
          global::S2CDamageUnitNotification subBuilder = new global::S2CDamageUnitNotification();
          if (payloadCase_ == PayloadOneofCase.DamageUnitNotification) {
            subBuilder.MergeFrom(DamageUnitNotification);
          }
          input.ReadMessage(subBuilder);
          DamageUnitNotification = subBuilder;
          break;
        }
        case 3202: {
          global::S2CUnitDeathNotification subBuilder = new global::S2CUnitDeathNotification();
          if (payloadCase_ == PayloadOneofCase.UnitDeathNotification) {
            subBuilder.MergeFrom(UnitDeathNotification);
          }
          input.ReadMessage(subBuilder);
          UnitDeathNotification = subBuilder;
          break;
        }
        case 4002: {
          global::C2SEnterCheckpointNotification subBuilder = new global::C2SEnterCheckpointNotification();
          if (payloadCase_ == PayloadOneofCase.EnterCheckpointNotification) {
            subBuilder.MergeFrom(EnterCheckpointNotification);
          }
          input.ReadMessage(subBuilder);
          EnterCheckpointNotification = subBuilder;
          break;
        }
        case 4010: {
          global::C2SExitCheckpointNotification subBuilder = new global::C2SExitCheckpointNotification();
          if (payloadCase_ == PayloadOneofCase.ExitCheckpointNotification) {
            subBuilder.MergeFrom(ExitCheckpointNotification);
          }
          input.ReadMessage(subBuilder);
          ExitCheckpointNotification = subBuilder;
          break;
        }
        case 4018: {
          global::S2CTryOccupationNotification subBuilder = new global::S2CTryOccupationNotification();
          if (payloadCase_ == PayloadOneofCase.TryOccupationNotification) {
            subBuilder.MergeFrom(TryOccupationNotification);
          }
          input.ReadMessage(subBuilder);
          TryOccupationNotification = subBuilder;
          break;
        }
        case 4026: {
          global::S2CPauseOccupationNotification subBuilder = new global::S2CPauseOccupationNotification();
          if (payloadCase_ == PayloadOneofCase.PauseOccupationNotification) {
            subBuilder.MergeFrom(PauseOccupationNotification);
          }
          input.ReadMessage(subBuilder);
          PauseOccupationNotification = subBuilder;
          break;
        }
        case 4034: {
          global::S2COccupationTimerResetNotification subBuilder = new global::S2COccupationTimerResetNotification();
          if (payloadCase_ == PayloadOneofCase.OccupationTimerResetNotification) {
            subBuilder.MergeFrom(OccupationTimerResetNotification);
          }
          input.ReadMessage(subBuilder);
          OccupationTimerResetNotification = subBuilder;
          break;
        }
        case 4042: {
          global::S2COccupationSuccessNotification subBuilder = new global::S2COccupationSuccessNotification();
          if (payloadCase_ == PayloadOneofCase.OccupationSuccessNotification) {
            subBuilder.MergeFrom(OccupationSuccessNotification);
          }
          input.ReadMessage(subBuilder);
          OccupationSuccessNotification = subBuilder;
          break;
        }
        case 4802: {
          global::C2SAttackBaseRequest subBuilder = new global::C2SAttackBaseRequest();
          if (payloadCase_ == PayloadOneofCase.AttackBaseRequest) {
            subBuilder.MergeFrom(AttackBaseRequest);
          }
          input.ReadMessage(subBuilder);
          AttackBaseRequest = subBuilder;
          break;
        }
        case 4810: {
          global::S2CAttackBaseResponse subBuilder = new global::S2CAttackBaseResponse();
          if (payloadCase_ == PayloadOneofCase.AttackBaseResponse) {
            subBuilder.MergeFrom(AttackBaseResponse);
          }
          input.ReadMessage(subBuilder);
          AttackBaseResponse = subBuilder;
          break;
        }
        case 4818: {
          global::S2CEnemyAttackBaseNotification subBuilder = new global::S2CEnemyAttackBaseNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyAttackBaseNotification) {
            subBuilder.MergeFrom(EnemyAttackBaseNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyAttackBaseNotification = subBuilder;
          break;
        }
        case 4826: {
          global::C2SDamageBaseRequest subBuilder = new global::C2SDamageBaseRequest();
          if (payloadCase_ == PayloadOneofCase.DamageBaseRequest) {
            subBuilder.MergeFrom(DamageBaseRequest);
          }
          input.ReadMessage(subBuilder);
          DamageBaseRequest = subBuilder;
          break;
        }
        case 4834: {
          global::S2CDamageBaseResponse subBuilder = new global::S2CDamageBaseResponse();
          if (payloadCase_ == PayloadOneofCase.DamageBaseResponse) {
            subBuilder.MergeFrom(DamageBaseResponse);
          }
          input.ReadMessage(subBuilder);
          DamageBaseResponse = subBuilder;
          break;
        }
        case 4842: {
          global::S2CEnemyDamageBaseNotification subBuilder = new global::S2CEnemyDamageBaseNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyDamageBaseNotification) {
            subBuilder.MergeFrom(EnemyDamageBaseNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyDamageBaseNotification = subBuilder;
          break;
        }
        case 5602: {
          global::S2CGameOverNotification subBuilder = new global::S2CGameOverNotification();
          if (payloadCase_ == PayloadOneofCase.GameOverNotification) {
            subBuilder.MergeFrom(GameOverNotification);
          }
          input.ReadMessage(subBuilder);
          GameOverNotification = subBuilder;
          break;
        }
        case 5610: {
          global::C2SGameEndNotification subBuilder = new global::C2SGameEndNotification();
          if (payloadCase_ == PayloadOneofCase.GameEndNotification) {
            subBuilder.MergeFrom(GameEndNotification);
          }
          input.ReadMessage(subBuilder);
          GameEndNotification = subBuilder;
          break;
        }
        case 6402: {
          global::C2SLocationNotification subBuilder = new global::C2SLocationNotification();
          if (payloadCase_ == PayloadOneofCase.LocationNotification) {
            subBuilder.MergeFrom(LocationNotification);
          }
          input.ReadMessage(subBuilder);
          LocationNotification = subBuilder;
          break;
        }
        case 6410: {
          global::S2CLocationSyncNotification subBuilder = new global::S2CLocationSyncNotification();
          if (payloadCase_ == PayloadOneofCase.LocationSyncNotification) {
            subBuilder.MergeFrom(LocationSyncNotification);
          }
          input.ReadMessage(subBuilder);
          LocationSyncNotification = subBuilder;
          break;
        }
        case 7202: {
          global::S2CMineralSyncNotification subBuilder = new global::S2CMineralSyncNotification();
          if (payloadCase_ == PayloadOneofCase.MineralSyncNotification) {
            subBuilder.MergeFrom(MineralSyncNotification);
          }
          input.ReadMessage(subBuilder);
          MineralSyncNotification = subBuilder;
          break;
        }
        case 8002: {
          global::C2SHealUnitRequest subBuilder = new global::C2SHealUnitRequest();
          if (payloadCase_ == PayloadOneofCase.HealUnitRequest) {
            subBuilder.MergeFrom(HealUnitRequest);
          }
          input.ReadMessage(subBuilder);
          HealUnitRequest = subBuilder;
          break;
        }
        case 8010: {
          global::S2CHealUnitNotification subBuilder = new global::S2CHealUnitNotification();
          if (payloadCase_ == PayloadOneofCase.HealUnitNotification) {
            subBuilder.MergeFrom(HealUnitNotification);
          }
          input.ReadMessage(subBuilder);
          HealUnitNotification = subBuilder;
          break;
        }
        case 8802: {
          global::C2SBuffUnitRequest subBuilder = new global::C2SBuffUnitRequest();
          if (payloadCase_ == PayloadOneofCase.BuffUnitRequest) {
            subBuilder.MergeFrom(BuffUnitRequest);
          }
          input.ReadMessage(subBuilder);
          BuffUnitRequest = subBuilder;
          break;
        }
        case 8810: {
          global::S2CBuffUnitNotification subBuilder = new global::S2CBuffUnitNotification();
          if (payloadCase_ == PayloadOneofCase.BuffUnitNotification) {
            subBuilder.MergeFrom(BuffUnitNotification);
          }
          input.ReadMessage(subBuilder);
          BuffUnitNotification = subBuilder;
          break;
        }
        case 9602: {
          global::C2SUnitAnimationNotification subBuilder = new global::C2SUnitAnimationNotification();
          if (payloadCase_ == PayloadOneofCase.UnitAnimationNotification) {
            subBuilder.MergeFrom(UnitAnimationNotification);
          }
          input.ReadMessage(subBuilder);
          UnitAnimationNotification = subBuilder;
          break;
        }
        case 9610: {
          global::S2CEnemyUnitAnimationNotification subBuilder = new global::S2CEnemyUnitAnimationNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyUnitAnimationNotification) {
            subBuilder.MergeFrom(EnemyUnitAnimationNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyUnitAnimationNotification = subBuilder;
          break;
        }
        case 10402: {
          global::C2SDrawCardRequest subBuilder = new global::C2SDrawCardRequest();
          if (payloadCase_ == PayloadOneofCase.DrawCardRequest) {
            subBuilder.MergeFrom(DrawCardRequest);
          }
          input.ReadMessage(subBuilder);
          DrawCardRequest = subBuilder;
          break;
        }
        case 10410: {
          global::S2CDrawCardResponse subBuilder = new global::S2CDrawCardResponse();
          if (payloadCase_ == PayloadOneofCase.DrawCardResponse) {
            subBuilder.MergeFrom(DrawCardResponse);
          }
          input.ReadMessage(subBuilder);
          DrawCardResponse = subBuilder;
          break;
        }
        case 10418: {
          global::S2CEliteCardNotification subBuilder = new global::S2CEliteCardNotification();
          if (payloadCase_ == PayloadOneofCase.EliteCardNotification) {
            subBuilder.MergeFrom(EliteCardNotification);
          }
          input.ReadMessage(subBuilder);
          EliteCardNotification = subBuilder;
          break;
        }
        case 11202: {
          global::C2SAttackSpellRequest subBuilder = new global::C2SAttackSpellRequest();
          if (payloadCase_ == PayloadOneofCase.AttackSpellRequest) {
            subBuilder.MergeFrom(AttackSpellRequest);
          }
          input.ReadMessage(subBuilder);
          AttackSpellRequest = subBuilder;
          break;
        }
        case 11210: {
          global::S2CAttackSpellResponse subBuilder = new global::S2CAttackSpellResponse();
          if (payloadCase_ == PayloadOneofCase.AttackSpellResponse) {
            subBuilder.MergeFrom(AttackSpellResponse);
          }
          input.ReadMessage(subBuilder);
          AttackSpellResponse = subBuilder;
          break;
        }
        case 11218: {
          global::S2CEnemyAttackSpellNotification subBuilder = new global::S2CEnemyAttackSpellNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyAttackSpellNotification) {
            subBuilder.MergeFrom(EnemyAttackSpellNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyAttackSpellNotification = subBuilder;
          break;
        }
        case 11226: {
          global::C2SHealSpellRequest subBuilder = new global::C2SHealSpellRequest();
          if (payloadCase_ == PayloadOneofCase.HealSpellRequest) {
            subBuilder.MergeFrom(HealSpellRequest);
          }
          input.ReadMessage(subBuilder);
          HealSpellRequest = subBuilder;
          break;
        }
        case 11234: {
          global::S2CHealSpellResponse subBuilder = new global::S2CHealSpellResponse();
          if (payloadCase_ == PayloadOneofCase.HealSpellResponse) {
            subBuilder.MergeFrom(HealSpellResponse);
          }
          input.ReadMessage(subBuilder);
          HealSpellResponse = subBuilder;
          break;
        }
        case 11242: {
          global::S2CEnemyHealSpellNotification subBuilder = new global::S2CEnemyHealSpellNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyHealSpellNotification) {
            subBuilder.MergeFrom(EnemyHealSpellNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyHealSpellNotification = subBuilder;
          break;
        }
        case 11250: {
          global::C2SBuffSpellRequest subBuilder = new global::C2SBuffSpellRequest();
          if (payloadCase_ == PayloadOneofCase.BuffSpellRequest) {
            subBuilder.MergeFrom(BuffSpellRequest);
          }
          input.ReadMessage(subBuilder);
          BuffSpellRequest = subBuilder;
          break;
        }
        case 11258: {
          global::S2CBuffSpellResponse subBuilder = new global::S2CBuffSpellResponse();
          if (payloadCase_ == PayloadOneofCase.BuffSpellResponse) {
            subBuilder.MergeFrom(BuffSpellResponse);
          }
          input.ReadMessage(subBuilder);
          BuffSpellResponse = subBuilder;
          break;
        }
        case 11266: {
          global::S2CEnemyBuffSpellNotification subBuilder = new global::S2CEnemyBuffSpellNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyBuffSpellNotification) {
            subBuilder.MergeFrom(EnemyBuffSpellNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyBuffSpellNotification = subBuilder;
          break;
        }
        case 11274: {
          global::C2SStunSpellRequest subBuilder = new global::C2SStunSpellRequest();
          if (payloadCase_ == PayloadOneofCase.StunSpellRequest) {
            subBuilder.MergeFrom(StunSpellRequest);
          }
          input.ReadMessage(subBuilder);
          StunSpellRequest = subBuilder;
          break;
        }
        case 11282: {
          global::S2CStunSpellResponse subBuilder = new global::S2CStunSpellResponse();
          if (payloadCase_ == PayloadOneofCase.StunSpellResponse) {
            subBuilder.MergeFrom(StunSpellResponse);
          }
          input.ReadMessage(subBuilder);
          StunSpellResponse = subBuilder;
          break;
        }
        case 11290: {
          global::S2CEnemyStunSpellNotification subBuilder = new global::S2CEnemyStunSpellNotification();
          if (payloadCase_ == PayloadOneofCase.EnemyStunSpellNotification) {
            subBuilder.MergeFrom(EnemyStunSpellNotification);
          }
          input.ReadMessage(subBuilder);
          EnemyStunSpellNotification = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
